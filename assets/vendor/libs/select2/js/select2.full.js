(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./libs/select2/js/select2.full.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./libs/select2/js/select2.full.js":
/*!*****************************************!*\
  !*** ./libs/select2/js/select2.full.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\r\n * Select2 4.0.13\r\n * https://select2.github.io\r\n *\r\n * Released under the MIT license\r\n * https://github.com/select2/select2/blob/master/LICENSE.md\r\n */\n;\n\n(function (factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function (jQuery) {\n  // This is needed so we can catch the AMD loader configuration and use it\n  // The inner file should be wrapped (by `banner.start.js`) in a function that\n  // returns the AMD loader references.\n  var S2 = function () {\n    // Restore the Select2 AMD loader so it can be used\n    // Needed mostly in the language files, where the loader is not inserted\n    if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {\n      var S2 = jQuery.fn.select2.amd;\n    }\n\n    var S2;\n\n    (function () {\n      if (!S2 || !S2.requirejs) {\n        if (!S2) {\n          S2 = {};\n        } else {\n          require = S2;\n        }\n        /**\r\n         * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\r\n         * Released under MIT license, http://github.com/requirejs/almond/LICENSE\r\n         */\n        //Going sloppy to avoid 'use strict' string cost, but strict practices should\n        //be followed.\n\n        /*global setTimeout: false */\n\n\n        var requirejs, require, define;\n\n        (function (undef) {\n          var main,\n              _req,\n              makeMap,\n              handlers,\n              defined = {},\n              waiting = {},\n              config = {},\n              defining = {},\n              hasOwn = Object.prototype.hasOwnProperty,\n              aps = [].slice,\n              jsSuffixRegExp = /\\.js$/;\n\n          function hasProp(obj, prop) {\n            return hasOwn.call(obj, prop);\n          }\n          /**\r\n           * Given a relative module name, like ./something, normalize it to\r\n           * a real name that can be mapped to a path.\r\n           * @param {String} name the relative name\r\n           * @param {String} baseName a real name that the name arg is relative\r\n           * to.\r\n           * @returns {String} normalized name\r\n           */\n\n\n          function normalize(name, baseName) {\n            var nameParts,\n                nameSegment,\n                mapValue,\n                foundMap,\n                lastIndex,\n                foundI,\n                foundStarMap,\n                starI,\n                i,\n                j,\n                part,\n                normalizedBaseParts,\n                baseParts = baseName && baseName.split(\"/\"),\n                map = config.map,\n                starMap = map && map['*'] || {}; //Adjust any relative paths.\n\n            if (name) {\n              name = name.split('/');\n              lastIndex = name.length - 1; // If wanting node ID compatibility, strip .js from end\n              // of IDs. Have to do this here, and not in nameToUrl\n              // because node allows either .js or non .js to map\n              // to same file.\n\n              if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n              } // Starts with a '.' so need the baseName\n\n\n              if (name[0].charAt(0) === '.' && baseParts) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that 'directory' and not name of the baseName's\n                //module. For instance, baseName of 'one/two/three', maps to\n                //'one/two/three.js', but we want the directory, 'one/two' for\n                //this normalization.\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                name = normalizedBaseParts.concat(name);\n              } //start trimDots\n\n\n              for (i = 0; i < name.length; i++) {\n                part = name[i];\n\n                if (part === '.') {\n                  name.splice(i, 1);\n                  i -= 1;\n                } else if (part === '..') {\n                  // If at the start, or previous value is still ..,\n                  // keep them so that when converted to a path it may\n                  // still work when converted to a path, even though\n                  // as an ID it is less than ideal. In larger point\n                  // releases, may be better to just kick out an error.\n                  if (i === 0 || i === 1 && name[2] === '..' || name[i - 1] === '..') {\n                    continue;\n                  } else if (i > 0) {\n                    name.splice(i - 1, 2);\n                    i -= 2;\n                  }\n                }\n              } //end trimDots\n\n\n              name = name.join('/');\n            } //Apply map config if available.\n\n\n            if ((baseParts || starMap) && map) {\n              nameParts = name.split('/');\n\n              for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                  //Find the longest baseName segment match in the config.\n                  //So, do joins on the biggest to smallest lengths of baseParts.\n                  for (j = baseParts.length; j > 0; j -= 1) {\n                    mapValue = map[baseParts.slice(0, j).join('/')]; //baseName segment has  config, find if it has one for\n                    //this name.\n\n                    if (mapValue) {\n                      mapValue = mapValue[nameSegment];\n\n                      if (mapValue) {\n                        //Match, update name to the new value.\n                        foundMap = mapValue;\n                        foundI = i;\n                        break;\n                      }\n                    }\n                  }\n                }\n\n                if (foundMap) {\n                  break;\n                } //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n\n\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                  foundStarMap = starMap[nameSegment];\n                  starI = i;\n                }\n              }\n\n              if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n              }\n\n              if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n              }\n            }\n\n            return name;\n          }\n\n          function makeRequire(relName, forceSync) {\n            return function () {\n              //A version of a require function that passes a moduleName\n              //value for items that may need to\n              //look up paths relative to the moduleName\n              var args = aps.call(arguments, 0); //If first arg is not require('string'), and there is only\n              //one arg, it is the array form without a callback. Insert\n              //a null so that the following concat is correct.\n\n              if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n              }\n\n              return _req.apply(undef, args.concat([relName, forceSync]));\n            };\n          }\n\n          function makeNormalize(relName) {\n            return function (name) {\n              return normalize(name, relName);\n            };\n          }\n\n          function makeLoad(depName) {\n            return function (value) {\n              defined[depName] = value;\n            };\n          }\n\n          function callDep(name) {\n            if (hasProp(waiting, name)) {\n              var args = waiting[name];\n              delete waiting[name];\n              defining[name] = true;\n              main.apply(undef, args);\n            }\n\n            if (!hasProp(defined, name) && !hasProp(defining, name)) {\n              throw new Error('No ' + name);\n            }\n\n            return defined[name];\n          } //Turns a plugin!resource to [plugin, resource]\n          //with the plugin being undefined if the name\n          //did not have a plugin prefix.\n\n\n          function splitPrefix(name) {\n            var prefix,\n                index = name ? name.indexOf('!') : -1;\n\n            if (index > -1) {\n              prefix = name.substring(0, index);\n              name = name.substring(index + 1, name.length);\n            }\n\n            return [prefix, name];\n          } //Creates a parts array for a relName where first part is plugin ID,\n          //second part is resource ID. Assumes relName has already been normalized.\n\n\n          function makeRelParts(relName) {\n            return relName ? splitPrefix(relName) : [];\n          }\n          /**\r\n           * Makes a name map, normalizing the name, and using a plugin\r\n           * for normalization if necessary. Grabs a ref to plugin\r\n           * too, as an optimization.\r\n           */\n\n\n          makeMap = function makeMap(name, relParts) {\n            var plugin,\n                parts = splitPrefix(name),\n                prefix = parts[0],\n                relResourceName = relParts[1];\n            name = parts[1];\n\n            if (prefix) {\n              prefix = normalize(prefix, relResourceName);\n              plugin = callDep(prefix);\n            } //Normalize according\n\n\n            if (prefix) {\n              if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relResourceName));\n              } else {\n                name = normalize(name, relResourceName);\n              }\n            } else {\n              name = normalize(name, relResourceName);\n              parts = splitPrefix(name);\n              prefix = parts[0];\n              name = parts[1];\n\n              if (prefix) {\n                plugin = callDep(prefix);\n              }\n            } //Using ridiculous property names for space reasons\n\n\n            return {\n              f: prefix ? prefix + '!' + name : name,\n              //fullName\n              n: name,\n              pr: prefix,\n              p: plugin\n            };\n          };\n\n          function makeConfig(name) {\n            return function () {\n              return config && config.config && config.config[name] || {};\n            };\n          }\n\n          handlers = {\n            require: function require(name) {\n              return makeRequire(name);\n            },\n            exports: function exports(name) {\n              var e = defined[name];\n\n              if (typeof e !== 'undefined') {\n                return e;\n              } else {\n                return defined[name] = {};\n              }\n            },\n            module: function module(name) {\n              return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n              };\n            }\n          };\n\n          main = function main(name, deps, callback, relName) {\n            var cjsModule,\n                depName,\n                ret,\n                map,\n                i,\n                relParts,\n                args = [],\n                callbackType = _typeof(callback),\n                usingExports; //Use name if no relName\n\n\n            relName = relName || name;\n            relParts = makeRelParts(relName); //Call the callback to define the module, if necessary.\n\n            if (callbackType === 'undefined' || callbackType === 'function') {\n              //Pull out the defined dependencies and pass the ordered\n              //values to the callback.\n              //Default to [require, exports, module] if no deps\n              deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n\n              for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relParts);\n                depName = map.f; //Fast path CommonJS standard dependencies.\n\n                if (depName === \"require\") {\n                  args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                  //CommonJS module spec 1.1\n                  args[i] = handlers.exports(name);\n                  usingExports = true;\n                } else if (depName === \"module\") {\n                  //CommonJS module spec 1.1\n                  cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) {\n                  args[i] = callDep(depName);\n                } else if (map.p) {\n                  map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                  args[i] = defined[depName];\n                } else {\n                  throw new Error(name + ' missing ' + depName);\n                }\n              }\n\n              ret = callback ? callback.apply(defined[name], args) : undefined;\n\n              if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) {\n                  defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                  //Use the return value from the function.\n                  defined[name] = ret;\n                }\n              }\n            } else if (name) {\n              //May just be an object definition for the module. Only\n              //worry about defining if have a module name.\n              defined[name] = callback;\n            }\n          };\n\n          requirejs = require = _req = function req(deps, callback, relName, forceSync, alt) {\n            if (typeof deps === \"string\") {\n              if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n              } //Just return the module wanted. In this scenario, the\n              //deps arg is the module name, and second arg (if passed)\n              //is just the relName.\n              //Normalize module name, if it contains . or ..\n\n\n              return callDep(makeMap(deps, makeRelParts(callback)).f);\n            } else if (!deps.splice) {\n              //deps is a config object, not an array.\n              config = deps;\n\n              if (config.deps) {\n                _req(config.deps, config.callback);\n              }\n\n              if (!callback) {\n                return;\n              }\n\n              if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n              } else {\n                deps = undef;\n              }\n            } //Support require(['a'])\n\n\n            callback = callback || function () {}; //If relName is a function, it is an errback handler,\n            //so remove it.\n\n\n            if (typeof relName === 'function') {\n              relName = forceSync;\n              forceSync = alt;\n            } //Simulate async callback;\n\n\n            if (forceSync) {\n              main(undef, deps, callback, relName);\n            } else {\n              //Using a non-zero value because of concern for what old browsers\n              //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n              //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n              //If want a value immediately, use require('id') instead -- something\n              //that works in almond on the global level, but not guaranteed and\n              //unlikely to work in other AMD implementations.\n              setTimeout(function () {\n                main(undef, deps, callback, relName);\n              }, 4);\n            }\n\n            return _req;\n          };\n          /**\r\n           * Just drops the config on the floor, but returns req in case\r\n           * the config return value is used.\r\n           */\n\n\n          _req.config = function (cfg) {\n            return _req(cfg);\n          };\n          /**\r\n           * Expose module registry for debugging and tooling\r\n           */\n\n\n          requirejs._defined = defined;\n\n          define = function define(name, deps, callback) {\n            if (typeof name !== 'string') {\n              throw new Error('See almond README: incorrect module build, no module name');\n            } //This module may not have dependencies\n\n\n            if (!deps.splice) {\n              //deps is not an array, so probably means\n              //an object literal or factory function for\n              //the value. Adjust args.\n              callback = deps;\n              deps = [];\n            }\n\n            if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n              waiting[name] = [name, deps, callback];\n            }\n          };\n\n          define.amd = {\n            jQuery: true\n          };\n        })();\n\n        S2.requirejs = requirejs;\n        S2.require = require;\n        S2.define = define;\n      }\n    })();\n\n    S2.define(\"almond\", function () {});\n    /* global jQuery:false, $:false */\n\n    S2.define('jquery', [], function () {\n      var _$ = jQuery || $;\n\n      if (_$ == null && console && console.error) {\n        console.error('Select2: An instance of jQuery or a jQuery-compatible library was not ' + 'found. Make sure that you are including jQuery before Select2 on your ' + 'web page.');\n      }\n\n      return _$;\n    });\n    S2.define('select2/utils', ['jquery'], function ($) {\n      var Utils = {};\n\n      Utils.Extend = function (ChildClass, SuperClass) {\n        var __hasProp = {}.hasOwnProperty;\n\n        function BaseConstructor() {\n          this.constructor = ChildClass;\n        }\n\n        for (var key in SuperClass) {\n          if (__hasProp.call(SuperClass, key)) {\n            ChildClass[key] = SuperClass[key];\n          }\n        }\n\n        BaseConstructor.prototype = SuperClass.prototype;\n        ChildClass.prototype = new BaseConstructor();\n        ChildClass.__super__ = SuperClass.prototype;\n        return ChildClass;\n      };\n\n      function getMethods(theClass) {\n        var proto = theClass.prototype;\n        var methods = [];\n\n        for (var methodName in proto) {\n          var m = proto[methodName];\n\n          if (typeof m !== 'function') {\n            continue;\n          }\n\n          if (methodName === 'constructor') {\n            continue;\n          }\n\n          methods.push(methodName);\n        }\n\n        return methods;\n      }\n\n      Utils.Decorate = function (SuperClass, DecoratorClass) {\n        var decoratedMethods = getMethods(DecoratorClass);\n        var superMethods = getMethods(SuperClass);\n\n        function DecoratedClass() {\n          var unshift = Array.prototype.unshift;\n          var argCount = DecoratorClass.prototype.constructor.length;\n          var calledConstructor = SuperClass.prototype.constructor;\n\n          if (argCount > 0) {\n            unshift.call(arguments, SuperClass.prototype.constructor);\n            calledConstructor = DecoratorClass.prototype.constructor;\n          }\n\n          calledConstructor.apply(this, arguments);\n        }\n\n        DecoratorClass.displayName = SuperClass.displayName;\n\n        function ctr() {\n          this.constructor = DecoratedClass;\n        }\n\n        DecoratedClass.prototype = new ctr();\n\n        for (var m = 0; m < superMethods.length; m++) {\n          var superMethod = superMethods[m];\n          DecoratedClass.prototype[superMethod] = SuperClass.prototype[superMethod];\n        }\n\n        var calledMethod = function calledMethod(methodName) {\n          // Stub out the original method if it's not decorating an actual method\n          var originalMethod = function originalMethod() {};\n\n          if (methodName in DecoratedClass.prototype) {\n            originalMethod = DecoratedClass.prototype[methodName];\n          }\n\n          var decoratedMethod = DecoratorClass.prototype[methodName];\n          return function () {\n            var unshift = Array.prototype.unshift;\n            unshift.call(arguments, originalMethod);\n            return decoratedMethod.apply(this, arguments);\n          };\n        };\n\n        for (var d = 0; d < decoratedMethods.length; d++) {\n          var decoratedMethod = decoratedMethods[d];\n          DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);\n        }\n\n        return DecoratedClass;\n      };\n\n      var Observable = function Observable() {\n        this.listeners = {};\n      };\n\n      Observable.prototype.on = function (event, callback) {\n        this.listeners = this.listeners || {};\n\n        if (event in this.listeners) {\n          this.listeners[event].push(callback);\n        } else {\n          this.listeners[event] = [callback];\n        }\n      };\n\n      Observable.prototype.trigger = function (event) {\n        var slice = Array.prototype.slice;\n        var params = slice.call(arguments, 1);\n        this.listeners = this.listeners || {}; // Params should always come in as an array\n\n        if (params == null) {\n          params = [];\n        } // If there are no arguments to the event, use a temporary object\n\n\n        if (params.length === 0) {\n          params.push({});\n        } // Set the `_type` of the first object to the event\n\n\n        params[0]._type = event;\n\n        if (event in this.listeners) {\n          this.invoke(this.listeners[event], slice.call(arguments, 1));\n        }\n\n        if ('*' in this.listeners) {\n          this.invoke(this.listeners['*'], arguments);\n        }\n      };\n\n      Observable.prototype.invoke = function (listeners, params) {\n        for (var i = 0, len = listeners.length; i < len; i++) {\n          listeners[i].apply(this, params);\n        }\n      };\n\n      Utils.Observable = Observable;\n\n      Utils.generateChars = function (length) {\n        var chars = '';\n\n        for (var i = 0; i < length; i++) {\n          var randomChar = Math.floor(Math.random() * 36);\n          chars += randomChar.toString(36);\n        }\n\n        return chars;\n      };\n\n      Utils.bind = function (func, context) {\n        return function () {\n          func.apply(context, arguments);\n        };\n      };\n\n      Utils._convertData = function (data) {\n        for (var originalKey in data) {\n          var keys = originalKey.split('-');\n          var dataLevel = data;\n\n          if (keys.length === 1) {\n            continue;\n          }\n\n          for (var k = 0; k < keys.length; k++) {\n            var key = keys[k]; // Lowercase the first letter\n            // By default, dash-separated becomes camelCase\n\n            key = key.substring(0, 1).toLowerCase() + key.substring(1);\n\n            if (!(key in dataLevel)) {\n              dataLevel[key] = {};\n            }\n\n            if (k == keys.length - 1) {\n              dataLevel[key] = data[originalKey];\n            }\n\n            dataLevel = dataLevel[key];\n          }\n\n          delete data[originalKey];\n        }\n\n        return data;\n      };\n\n      Utils.hasScroll = function (index, el) {\n        // Adapted from the function created by @ShadowScripter\n        // and adapted by @BillBarry on the Stack Exchange Code Review website.\n        // The original code can be found at\n        // http://codereview.stackexchange.com/q/13338\n        // and was designed to be used with the Sizzle selector engine.\n        var $el = $(el);\n        var overflowX = el.style.overflowX;\n        var overflowY = el.style.overflowY; //Check both x and y declarations\n\n        if (overflowX === overflowY && (overflowY === 'hidden' || overflowY === 'visible')) {\n          return false;\n        }\n\n        if (overflowX === 'scroll' || overflowY === 'scroll') {\n          return true;\n        }\n\n        return $el.innerHeight() < el.scrollHeight || $el.innerWidth() < el.scrollWidth;\n      };\n\n      Utils.escapeMarkup = function (markup) {\n        var replaceMap = {\n          '\\\\': '&#92;',\n          '&': '&amp;',\n          '<': '&lt;',\n          '>': '&gt;',\n          '\"': '&quot;',\n          '\\'': '&#39;',\n          '/': '&#47;'\n        }; // Do not try to escape the markup if it's not a string\n\n        if (typeof markup !== 'string') {\n          return markup;\n        }\n\n        return String(markup).replace(/[&<>\"'\\/\\\\]/g, function (match) {\n          return replaceMap[match];\n        });\n      }; // Append an array of jQuery nodes to a given element.\n\n\n      Utils.appendMany = function ($element, $nodes) {\n        // jQuery 1.7.x does not support $.fn.append() with an array\n        // Fall back to a jQuery object collection using $.fn.add()\n        if ($.fn.jquery.substr(0, 3) === '1.7') {\n          var $jqNodes = $();\n          $.map($nodes, function (node) {\n            $jqNodes = $jqNodes.add(node);\n          });\n          $nodes = $jqNodes;\n        }\n\n        $element.append($nodes);\n      }; // Cache objects in Utils.__cache instead of $.data (see #4346)\n\n\n      Utils.__cache = {};\n      var id = 0;\n\n      Utils.GetUniqueElementId = function (element) {\n        // Get a unique element Id. If element has no id,\n        // creates a new unique number, stores it in the id\n        // attribute and returns the new id.\n        // If an id already exists, it simply returns it.\n        var select2Id = element.getAttribute('data-select2-id');\n\n        if (select2Id == null) {\n          // If element has id, use it.\n          if (element.id) {\n            select2Id = element.id;\n            element.setAttribute('data-select2-id', select2Id);\n          } else {\n            element.setAttribute('data-select2-id', ++id);\n            select2Id = id.toString();\n          }\n        }\n\n        return select2Id;\n      };\n\n      Utils.StoreData = function (element, name, value) {\n        // Stores an item in the cache for a specified element.\n        // name is the cache key.\n        var id = Utils.GetUniqueElementId(element);\n\n        if (!Utils.__cache[id]) {\n          Utils.__cache[id] = {};\n        }\n\n        Utils.__cache[id][name] = value;\n      };\n\n      Utils.GetData = function (element, name) {\n        // Retrieves a value from the cache by its key (name)\n        // name is optional. If no name specified, return\n        // all cache items for the specified element.\n        // and for a specified element.\n        var id = Utils.GetUniqueElementId(element);\n\n        if (name) {\n          if (Utils.__cache[id]) {\n            if (Utils.__cache[id][name] != null) {\n              return Utils.__cache[id][name];\n            }\n\n            return $(element).data(name); // Fallback to HTML5 data attribs.\n          }\n\n          return $(element).data(name); // Fallback to HTML5 data attribs.\n        } else {\n          return Utils.__cache[id];\n        }\n      };\n\n      Utils.RemoveData = function (element) {\n        // Removes all cached items for a specified element.\n        var id = Utils.GetUniqueElementId(element);\n\n        if (Utils.__cache[id] != null) {\n          delete Utils.__cache[id];\n        }\n\n        element.removeAttribute('data-select2-id');\n      };\n\n      return Utils;\n    });\n    S2.define('select2/results', ['jquery', './utils'], function ($, Utils) {\n      function Results($element, options, dataAdapter) {\n        this.$element = $element;\n        this.data = dataAdapter;\n        this.options = options;\n\n        Results.__super__.constructor.call(this);\n      }\n\n      Utils.Extend(Results, Utils.Observable);\n\n      Results.prototype.render = function () {\n        var $results = $('<ul class=\"select2-results__options\" role=\"listbox\"></ul>');\n\n        if (this.options.get('multiple')) {\n          $results.attr('aria-multiselectable', 'true');\n        }\n\n        this.$results = $results;\n        return $results;\n      };\n\n      Results.prototype.clear = function () {\n        this.$results.empty();\n      };\n\n      Results.prototype.displayMessage = function (params) {\n        var escapeMarkup = this.options.get('escapeMarkup');\n        this.clear();\n        this.hideLoading();\n        var $message = $('<li role=\"alert\" aria-live=\"assertive\"' + ' class=\"select2-results__option\"></li>');\n        var message = this.options.get('translations').get(params.message);\n        $message.append(escapeMarkup(message(params.args)));\n        $message[0].className += ' select2-results__message';\n        this.$results.append($message);\n      };\n\n      Results.prototype.hideMessages = function () {\n        this.$results.find('.select2-results__message').remove();\n      };\n\n      Results.prototype.append = function (data) {\n        this.hideLoading();\n        var $options = [];\n\n        if (data.results == null || data.results.length === 0) {\n          if (this.$results.children().length === 0) {\n            this.trigger('results:message', {\n              message: 'noResults'\n            });\n          }\n\n          return;\n        }\n\n        data.results = this.sort(data.results);\n\n        for (var d = 0; d < data.results.length; d++) {\n          var item = data.results[d];\n          var $option = this.option(item);\n          $options.push($option);\n        }\n\n        this.$results.append($options);\n      };\n\n      Results.prototype.position = function ($results, $dropdown) {\n        var $resultsContainer = $dropdown.find('.select2-results');\n        $resultsContainer.append($results);\n      };\n\n      Results.prototype.sort = function (data) {\n        var sorter = this.options.get('sorter');\n        return sorter(data);\n      };\n\n      Results.prototype.highlightFirstItem = function () {\n        var $options = this.$results.find('.select2-results__option[aria-selected]');\n        var $selected = $options.filter('[aria-selected=true]'); // Check if there are any selected options\n\n        if ($selected.length > 0) {\n          // If there are selected options, highlight the first\n          $selected.first().trigger('mouseenter');\n        } else {\n          // If there are no selected options, highlight the first option\n          // in the dropdown\n          $options.first().trigger('mouseenter');\n        }\n\n        this.ensureHighlightVisible();\n      };\n\n      Results.prototype.setClasses = function () {\n        var self = this;\n        this.data.current(function (selected) {\n          var selectedIds = $.map(selected, function (s) {\n            return s.id.toString();\n          });\n          var $options = self.$results.find('.select2-results__option[aria-selected]');\n          $options.each(function () {\n            var $option = $(this);\n            var item = Utils.GetData(this, 'data'); // id needs to be converted to a string when comparing\n\n            var id = '' + item.id;\n\n            if (item.element != null && item.element.selected || item.element == null && $.inArray(id, selectedIds) > -1) {\n              $option.attr('aria-selected', 'true');\n            } else {\n              $option.attr('aria-selected', 'false');\n            }\n          });\n        });\n      };\n\n      Results.prototype.showLoading = function (params) {\n        this.hideLoading();\n        var loadingMore = this.options.get('translations').get('searching');\n        var loading = {\n          disabled: true,\n          loading: true,\n          text: loadingMore(params)\n        };\n        var $loading = this.option(loading);\n        $loading.className += ' loading-results';\n        this.$results.prepend($loading);\n      };\n\n      Results.prototype.hideLoading = function () {\n        this.$results.find('.loading-results').remove();\n      };\n\n      Results.prototype.option = function (data) {\n        var option = document.createElement('li');\n        option.className = 'select2-results__option';\n        var attrs = {\n          'role': 'option',\n          'aria-selected': 'false'\n        };\n        var matches = window.Element.prototype.matches || window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector;\n\n        if (data.element != null && matches.call(data.element, ':disabled') || data.element == null && data.disabled) {\n          delete attrs['aria-selected'];\n          attrs['aria-disabled'] = 'true';\n        }\n\n        if (data.id == null) {\n          delete attrs['aria-selected'];\n        }\n\n        if (data._resultId != null) {\n          option.id = data._resultId;\n        }\n\n        if (data.title) {\n          option.title = data.title;\n        }\n\n        if (data.children) {\n          attrs.role = 'group';\n          attrs['aria-label'] = data.text;\n          delete attrs['aria-selected'];\n        }\n\n        for (var attr in attrs) {\n          var val = attrs[attr];\n          option.setAttribute(attr, val);\n        }\n\n        if (data.children) {\n          var $option = $(option);\n          var label = document.createElement('strong');\n          label.className = 'select2-results__group';\n          var $label = $(label);\n          this.template(data, label);\n          var $children = [];\n\n          for (var c = 0; c < data.children.length; c++) {\n            var child = data.children[c];\n            var $child = this.option(child);\n            $children.push($child);\n          }\n\n          var $childrenContainer = $('<ul></ul>', {\n            'class': 'select2-results__options select2-results__options--nested'\n          });\n          $childrenContainer.append($children);\n          $option.append(label);\n          $option.append($childrenContainer);\n        } else {\n          this.template(data, option);\n        }\n\n        Utils.StoreData(option, 'data', data);\n        return option;\n      };\n\n      Results.prototype.bind = function (container, $container) {\n        var self = this;\n        var id = container.id + '-results';\n        this.$results.attr('id', id);\n        container.on('results:all', function (params) {\n          self.clear();\n          self.append(params.data);\n\n          if (container.isOpen()) {\n            self.setClasses();\n            self.highlightFirstItem();\n          }\n        });\n        container.on('results:append', function (params) {\n          self.append(params.data);\n\n          if (container.isOpen()) {\n            self.setClasses();\n          }\n        });\n        container.on('query', function (params) {\n          self.hideMessages();\n          self.showLoading(params);\n        });\n        container.on('select', function () {\n          if (!container.isOpen()) {\n            return;\n          }\n\n          self.setClasses();\n\n          if (self.options.get('scrollAfterSelect')) {\n            self.highlightFirstItem();\n          }\n        });\n        container.on('unselect', function () {\n          if (!container.isOpen()) {\n            return;\n          }\n\n          self.setClasses();\n\n          if (self.options.get('scrollAfterSelect')) {\n            self.highlightFirstItem();\n          }\n        });\n        container.on('open', function () {\n          // When the dropdown is open, aria-expended=\"true\"\n          self.$results.attr('aria-expanded', 'true');\n          self.$results.attr('aria-hidden', 'false');\n          self.setClasses();\n          self.ensureHighlightVisible();\n        });\n        container.on('close', function () {\n          // When the dropdown is closed, aria-expended=\"false\"\n          self.$results.attr('aria-expanded', 'false');\n          self.$results.attr('aria-hidden', 'true');\n          self.$results.removeAttr('aria-activedescendant');\n        });\n        container.on('results:toggle', function () {\n          var $highlighted = self.getHighlightedResults();\n\n          if ($highlighted.length === 0) {\n            return;\n          }\n\n          $highlighted.trigger('mouseup');\n        });\n        container.on('results:select', function () {\n          var $highlighted = self.getHighlightedResults();\n\n          if ($highlighted.length === 0) {\n            return;\n          }\n\n          var data = Utils.GetData($highlighted[0], 'data');\n\n          if ($highlighted.attr('aria-selected') == 'true') {\n            self.trigger('close', {});\n          } else {\n            self.trigger('select', {\n              data: data\n            });\n          }\n        });\n        container.on('results:previous', function () {\n          var $highlighted = self.getHighlightedResults();\n          var $options = self.$results.find('[aria-selected]');\n          var currentIndex = $options.index($highlighted); // If we are already at the top, don't move further\n          // If no options, currentIndex will be -1\n\n          if (currentIndex <= 0) {\n            return;\n          }\n\n          var nextIndex = currentIndex - 1; // If none are highlighted, highlight the first\n\n          if ($highlighted.length === 0) {\n            nextIndex = 0;\n          }\n\n          var $next = $options.eq(nextIndex);\n          $next.trigger('mouseenter');\n          var currentOffset = self.$results.offset().top;\n          var nextTop = $next.offset().top;\n          var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);\n\n          if (nextIndex === 0) {\n            self.$results.scrollTop(0);\n          } else if (nextTop - currentOffset < 0) {\n            self.$results.scrollTop(nextOffset);\n          }\n        });\n        container.on('results:next', function () {\n          var $highlighted = self.getHighlightedResults();\n          var $options = self.$results.find('[aria-selected]');\n          var currentIndex = $options.index($highlighted);\n          var nextIndex = currentIndex + 1; // If we are at the last option, stay there\n\n          if (nextIndex >= $options.length) {\n            return;\n          }\n\n          var $next = $options.eq(nextIndex);\n          $next.trigger('mouseenter');\n          var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);\n          var nextBottom = $next.offset().top + $next.outerHeight(false);\n          var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;\n\n          if (nextIndex === 0) {\n            self.$results.scrollTop(0);\n          } else if (nextBottom > currentOffset) {\n            self.$results.scrollTop(nextOffset);\n          }\n        });\n        container.on('results:focus', function (params) {\n          params.element.addClass('select2-results__option--highlighted');\n        });\n        container.on('results:message', function (params) {\n          self.displayMessage(params);\n        });\n\n        if ($.fn.mousewheel) {\n          this.$results.on('mousewheel', function (e) {\n            var top = self.$results.scrollTop();\n            var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;\n            var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;\n            var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();\n\n            if (isAtTop) {\n              self.$results.scrollTop(0);\n              e.preventDefault();\n              e.stopPropagation();\n            } else if (isAtBottom) {\n              self.$results.scrollTop(self.$results.get(0).scrollHeight - self.$results.height());\n              e.preventDefault();\n              e.stopPropagation();\n            }\n          });\n        }\n\n        this.$results.on('mouseup', '.select2-results__option[aria-selected]', function (evt) {\n          var $this = $(this);\n          var data = Utils.GetData(this, 'data');\n\n          if ($this.attr('aria-selected') === 'true') {\n            if (self.options.get('multiple')) {\n              self.trigger('unselect', {\n                originalEvent: evt,\n                data: data\n              });\n            } else {\n              self.trigger('close', {});\n            }\n\n            return;\n          }\n\n          self.trigger('select', {\n            originalEvent: evt,\n            data: data\n          });\n        });\n        this.$results.on('mouseenter', '.select2-results__option[aria-selected]', function (evt) {\n          var data = Utils.GetData(this, 'data');\n          self.getHighlightedResults().removeClass('select2-results__option--highlighted');\n          self.trigger('results:focus', {\n            data: data,\n            element: $(this)\n          });\n        });\n      };\n\n      Results.prototype.getHighlightedResults = function () {\n        var $highlighted = this.$results.find('.select2-results__option--highlighted');\n        return $highlighted;\n      };\n\n      Results.prototype.destroy = function () {\n        this.$results.remove();\n      };\n\n      Results.prototype.ensureHighlightVisible = function () {\n        var $highlighted = this.getHighlightedResults();\n\n        if ($highlighted.length === 0) {\n          return;\n        }\n\n        var $options = this.$results.find('[aria-selected]');\n        var currentIndex = $options.index($highlighted);\n        var currentOffset = this.$results.offset().top;\n        var nextTop = $highlighted.offset().top;\n        var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);\n        var offsetDelta = nextTop - currentOffset;\n        nextOffset -= $highlighted.outerHeight(false) * 2;\n\n        if (currentIndex <= 2) {\n          this.$results.scrollTop(0);\n        } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {\n          this.$results.scrollTop(nextOffset);\n        }\n      };\n\n      Results.prototype.template = function (result, container) {\n        var template = this.options.get('templateResult');\n        var escapeMarkup = this.options.get('escapeMarkup');\n        var content = template(result, container);\n\n        if (content == null) {\n          container.style.display = 'none';\n        } else if (typeof content === 'string') {\n          container.innerHTML = escapeMarkup(content);\n        } else {\n          $(container).append(content);\n        }\n      };\n\n      return Results;\n    });\n    S2.define('select2/keys', [], function () {\n      var KEYS = {\n        BACKSPACE: 8,\n        TAB: 9,\n        ENTER: 13,\n        SHIFT: 16,\n        CTRL: 17,\n        ALT: 18,\n        ESC: 27,\n        SPACE: 32,\n        PAGE_UP: 33,\n        PAGE_DOWN: 34,\n        END: 35,\n        HOME: 36,\n        LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        DOWN: 40,\n        DELETE: 46\n      };\n      return KEYS;\n    });\n    S2.define('select2/selection/base', ['jquery', '../utils', '../keys'], function ($, Utils, KEYS) {\n      function BaseSelection($element, options) {\n        this.$element = $element;\n        this.options = options;\n\n        BaseSelection.__super__.constructor.call(this);\n      }\n\n      Utils.Extend(BaseSelection, Utils.Observable);\n\n      BaseSelection.prototype.render = function () {\n        var $selection = $('<span class=\"select2-selection\" role=\"combobox\" ' + ' aria-haspopup=\"true\" aria-expanded=\"false\">' + '</span>');\n        this._tabindex = 0;\n\n        if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {\n          this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');\n        } else if (this.$element.attr('tabindex') != null) {\n          this._tabindex = this.$element.attr('tabindex');\n        }\n\n        $selection.attr('title', this.$element.attr('title'));\n        $selection.attr('tabindex', this._tabindex);\n        $selection.attr('aria-disabled', 'false');\n        this.$selection = $selection;\n        return $selection;\n      };\n\n      BaseSelection.prototype.bind = function (container, $container) {\n        var self = this;\n        var resultsId = container.id + '-results';\n        this.container = container;\n        this.$selection.on('focus', function (evt) {\n          self.trigger('focus', evt);\n        });\n        this.$selection.on('blur', function (evt) {\n          self._handleBlur(evt);\n        });\n        this.$selection.on('keydown', function (evt) {\n          self.trigger('keypress', evt);\n\n          if (evt.which === KEYS.SPACE) {\n            evt.preventDefault();\n          }\n        });\n        container.on('results:focus', function (params) {\n          self.$selection.attr('aria-activedescendant', params.data._resultId);\n        });\n        container.on('selection:update', function (params) {\n          self.update(params.data);\n        });\n        container.on('open', function () {\n          // When the dropdown is open, aria-expanded=\"true\"\n          self.$selection.attr('aria-expanded', 'true');\n          self.$selection.attr('aria-owns', resultsId);\n\n          self._attachCloseHandler(container);\n        });\n        container.on('close', function () {\n          // When the dropdown is closed, aria-expanded=\"false\"\n          self.$selection.attr('aria-expanded', 'false');\n          self.$selection.removeAttr('aria-activedescendant');\n          self.$selection.removeAttr('aria-owns');\n          self.$selection.trigger('focus');\n\n          self._detachCloseHandler(container);\n        });\n        container.on('enable', function () {\n          self.$selection.attr('tabindex', self._tabindex);\n          self.$selection.attr('aria-disabled', 'false');\n        });\n        container.on('disable', function () {\n          self.$selection.attr('tabindex', '-1');\n          self.$selection.attr('aria-disabled', 'true');\n        });\n      };\n\n      BaseSelection.prototype._handleBlur = function (evt) {\n        var self = this; // This needs to be delayed as the active element is the body when the tab\n        // key is pressed, possibly along with others.\n\n        window.setTimeout(function () {\n          // Don't trigger `blur` if the focus is still in the selection\n          if (document.activeElement == self.$selection[0] || $.contains(self.$selection[0], document.activeElement)) {\n            return;\n          }\n\n          self.trigger('blur', evt);\n        }, 1);\n      };\n\n      BaseSelection.prototype._attachCloseHandler = function (container) {\n        $(document.body).on('mousedown.select2.' + container.id, function (e) {\n          var $target = $(e.target);\n          var $select = $target.closest('.select2');\n          var $all = $('.select2.select2-container--open');\n          $all.each(function () {\n            if (this == $select[0]) {\n              return;\n            }\n\n            var $element = Utils.GetData(this, 'element');\n            $element.select2('close');\n          });\n        });\n      };\n\n      BaseSelection.prototype._detachCloseHandler = function (container) {\n        $(document.body).off('mousedown.select2.' + container.id);\n      };\n\n      BaseSelection.prototype.position = function ($selection, $container) {\n        var $selectionContainer = $container.find('.selection');\n        $selectionContainer.append($selection);\n      };\n\n      BaseSelection.prototype.destroy = function () {\n        this._detachCloseHandler(this.container);\n      };\n\n      BaseSelection.prototype.update = function (data) {\n        throw new Error('The `update` method must be defined in child classes.');\n      };\n      /**\r\n       * Helper method to abstract the \"enabled\" (not \"disabled\") state of this\r\n       * object.\r\n       *\r\n       * @return {true} if the instance is not disabled.\r\n       * @return {false} if the instance is disabled.\r\n       */\n\n\n      BaseSelection.prototype.isEnabled = function () {\n        return !this.isDisabled();\n      };\n      /**\r\n       * Helper method to abstract the \"disabled\" state of this object.\r\n       *\r\n       * @return {true} if the disabled option is true.\r\n       * @return {false} if the disabled option is false.\r\n       */\n\n\n      BaseSelection.prototype.isDisabled = function () {\n        return this.options.get('disabled');\n      };\n\n      return BaseSelection;\n    });\n    S2.define('select2/selection/single', ['jquery', './base', '../utils', '../keys'], function ($, BaseSelection, Utils, KEYS) {\n      function SingleSelection() {\n        SingleSelection.__super__.constructor.apply(this, arguments);\n      }\n\n      Utils.Extend(SingleSelection, BaseSelection);\n\n      SingleSelection.prototype.render = function () {\n        var $selection = SingleSelection.__super__.render.call(this);\n\n        $selection.addClass('select2-selection--single');\n        $selection.html('<span class=\"select2-selection__rendered\"></span>' + '<span class=\"select2-selection__arrow\" role=\"presentation\">' + '<b role=\"presentation\"></b>' + '</span>');\n        return $selection;\n      };\n\n      SingleSelection.prototype.bind = function (container, $container) {\n        var self = this;\n\n        SingleSelection.__super__.bind.apply(this, arguments);\n\n        var id = container.id + '-container';\n        this.$selection.find('.select2-selection__rendered').attr('id', id).attr('role', 'textbox').attr('aria-readonly', 'true');\n        this.$selection.attr('aria-labelledby', id);\n        this.$selection.on('mousedown', function (evt) {\n          // Only respond to left clicks\n          if (evt.which !== 1) {\n            return;\n          }\n\n          self.trigger('toggle', {\n            originalEvent: evt\n          });\n        });\n        this.$selection.on('focus', function (evt) {// User focuses on the container\n        });\n        this.$selection.on('blur', function (evt) {// User exits the container\n        });\n        container.on('focus', function (evt) {\n          if (!container.isOpen()) {\n            self.$selection.trigger('focus');\n          }\n        });\n      };\n\n      SingleSelection.prototype.clear = function () {\n        var $rendered = this.$selection.find('.select2-selection__rendered');\n        $rendered.empty();\n        $rendered.removeAttr('title'); // clear tooltip on empty\n      };\n\n      SingleSelection.prototype.display = function (data, container) {\n        var template = this.options.get('templateSelection');\n        var escapeMarkup = this.options.get('escapeMarkup');\n        return escapeMarkup(template(data, container));\n      };\n\n      SingleSelection.prototype.selectionContainer = function () {\n        return $('<span></span>');\n      };\n\n      SingleSelection.prototype.update = function (data) {\n        if (data.length === 0) {\n          this.clear();\n          return;\n        }\n\n        var selection = data[0];\n        var $rendered = this.$selection.find('.select2-selection__rendered');\n        var formatted = this.display(selection, $rendered);\n        $rendered.empty().append(formatted);\n        var title = selection.title || selection.text;\n\n        if (title) {\n          $rendered.attr('title', title);\n        } else {\n          $rendered.removeAttr('title');\n        }\n      };\n\n      return SingleSelection;\n    });\n    S2.define('select2/selection/multiple', ['jquery', './base', '../utils'], function ($, BaseSelection, Utils) {\n      function MultipleSelection($element, options) {\n        MultipleSelection.__super__.constructor.apply(this, arguments);\n      }\n\n      Utils.Extend(MultipleSelection, BaseSelection);\n\n      MultipleSelection.prototype.render = function () {\n        var $selection = MultipleSelection.__super__.render.call(this);\n\n        $selection.addClass('select2-selection--multiple');\n        $selection.html('<ul class=\"select2-selection__rendered\"></ul>');\n        return $selection;\n      };\n\n      MultipleSelection.prototype.bind = function (container, $container) {\n        var self = this;\n\n        MultipleSelection.__super__.bind.apply(this, arguments);\n\n        this.$selection.on('click', function (evt) {\n          self.trigger('toggle', {\n            originalEvent: evt\n          });\n        });\n        this.$selection.on('click', '.select2-selection__choice__remove', function (evt) {\n          // Ignore the event if it is disabled\n          if (self.isDisabled()) {\n            return;\n          }\n\n          var $remove = $(this);\n          var $selection = $remove.parent();\n          var data = Utils.GetData($selection[0], 'data');\n          self.trigger('unselect', {\n            originalEvent: evt,\n            data: data\n          });\n        });\n      };\n\n      MultipleSelection.prototype.clear = function () {\n        var $rendered = this.$selection.find('.select2-selection__rendered');\n        $rendered.empty();\n        $rendered.removeAttr('title');\n      };\n\n      MultipleSelection.prototype.display = function (data, container) {\n        var template = this.options.get('templateSelection');\n        var escapeMarkup = this.options.get('escapeMarkup');\n        return escapeMarkup(template(data, container));\n      };\n\n      MultipleSelection.prototype.selectionContainer = function () {\n        var $container = $('<li class=\"select2-selection__choice\">' + '<span class=\"select2-selection__choice__remove\" role=\"presentation\">' + '&times;' + '</span>' + '</li>');\n        return $container;\n      };\n\n      MultipleSelection.prototype.update = function (data) {\n        this.clear();\n\n        if (data.length === 0) {\n          return;\n        }\n\n        var $selections = [];\n\n        for (var d = 0; d < data.length; d++) {\n          var selection = data[d];\n          var $selection = this.selectionContainer();\n          var formatted = this.display(selection, $selection);\n          $selection.append(formatted);\n          var title = selection.title || selection.text;\n\n          if (title) {\n            $selection.attr('title', title);\n          }\n\n          Utils.StoreData($selection[0], 'data', selection);\n          $selections.push($selection);\n        }\n\n        var $rendered = this.$selection.find('.select2-selection__rendered');\n        Utils.appendMany($rendered, $selections);\n      };\n\n      return MultipleSelection;\n    });\n    S2.define('select2/selection/placeholder', ['../utils'], function (Utils) {\n      function Placeholder(decorated, $element, options) {\n        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));\n        decorated.call(this, $element, options);\n      }\n\n      Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {\n        if (typeof placeholder === 'string') {\n          placeholder = {\n            id: '',\n            text: placeholder\n          };\n        }\n\n        return placeholder;\n      };\n\n      Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {\n        var $placeholder = this.selectionContainer();\n        $placeholder.html(this.display(placeholder));\n        $placeholder.addClass('select2-selection__placeholder').removeClass('select2-selection__choice');\n        return $placeholder;\n      };\n\n      Placeholder.prototype.update = function (decorated, data) {\n        var singlePlaceholder = data.length == 1 && data[0].id != this.placeholder.id;\n        var multipleSelections = data.length > 1;\n\n        if (multipleSelections || singlePlaceholder) {\n          return decorated.call(this, data);\n        }\n\n        this.clear();\n        var $placeholder = this.createPlaceholder(this.placeholder);\n        this.$selection.find('.select2-selection__rendered').append($placeholder);\n      };\n\n      return Placeholder;\n    });\n    S2.define('select2/selection/allowClear', ['jquery', '../keys', '../utils'], function ($, KEYS, Utils) {\n      function AllowClear() {}\n\n      AllowClear.prototype.bind = function (decorated, container, $container) {\n        var self = this;\n        decorated.call(this, container, $container);\n\n        if (this.placeholder == null) {\n          if (this.options.get('debug') && window.console && console.error) {\n            console.error('Select2: The `allowClear` option should be used in combination ' + 'with the `placeholder` option.');\n          }\n        }\n\n        this.$selection.on('mousedown', '.select2-selection__clear', function (evt) {\n          self._handleClear(evt);\n        });\n        container.on('keypress', function (evt) {\n          self._handleKeyboardClear(evt, container);\n        });\n      };\n\n      AllowClear.prototype._handleClear = function (_, evt) {\n        // Ignore the event if it is disabled\n        if (this.isDisabled()) {\n          return;\n        }\n\n        var $clear = this.$selection.find('.select2-selection__clear'); // Ignore the event if nothing has been selected\n\n        if ($clear.length === 0) {\n          return;\n        }\n\n        evt.stopPropagation();\n        var data = Utils.GetData($clear[0], 'data');\n        var previousVal = this.$element.val();\n        this.$element.val(this.placeholder.id);\n        var unselectData = {\n          data: data\n        };\n        this.trigger('clear', unselectData);\n\n        if (unselectData.prevented) {\n          this.$element.val(previousVal);\n          return;\n        }\n\n        for (var d = 0; d < data.length; d++) {\n          unselectData = {\n            data: data[d]\n          }; // Trigger the `unselect` event, so people can prevent it from being\n          // cleared.\n\n          this.trigger('unselect', unselectData); // If the event was prevented, don't clear it out.\n\n          if (unselectData.prevented) {\n            this.$element.val(previousVal);\n            return;\n          }\n        }\n\n        this.$element.trigger('input').trigger('change');\n        this.trigger('toggle', {});\n      };\n\n      AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {\n        if (container.isOpen()) {\n          return;\n        }\n\n        if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {\n          this._handleClear(evt);\n        }\n      };\n\n      AllowClear.prototype.update = function (decorated, data) {\n        decorated.call(this, data);\n\n        if (this.$selection.find('.select2-selection__placeholder').length > 0 || data.length === 0) {\n          return;\n        }\n\n        var removeAll = this.options.get('translations').get('removeAllItems');\n        var $remove = $('<span class=\"select2-selection__clear\" title=\"' + removeAll() + '\">' + '&times;' + '</span>');\n        Utils.StoreData($remove[0], 'data', data);\n        this.$selection.find('.select2-selection__rendered').prepend($remove);\n      };\n\n      return AllowClear;\n    });\n    S2.define('select2/selection/search', ['jquery', '../utils', '../keys'], function ($, Utils, KEYS) {\n      function Search(decorated, $element, options) {\n        decorated.call(this, $element, options);\n      }\n\n      Search.prototype.render = function (decorated) {\n        var $search = $('<li class=\"select2-search select2-search--inline\">' + '<input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\"' + ' autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\"' + ' spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" />' + '</li>');\n        this.$searchContainer = $search;\n        this.$search = $search.find('input');\n        var $rendered = decorated.call(this);\n\n        this._transferTabIndex();\n\n        return $rendered;\n      };\n\n      Search.prototype.bind = function (decorated, container, $container) {\n        var self = this;\n        var resultsId = container.id + '-results';\n        decorated.call(this, container, $container);\n        container.on('open', function () {\n          self.$search.attr('aria-controls', resultsId);\n          self.$search.trigger('focus');\n        });\n        container.on('close', function () {\n          self.$search.val('');\n          self.$search.removeAttr('aria-controls');\n          self.$search.removeAttr('aria-activedescendant');\n          self.$search.trigger('focus');\n        });\n        container.on('enable', function () {\n          self.$search.prop('disabled', false);\n\n          self._transferTabIndex();\n        });\n        container.on('disable', function () {\n          self.$search.prop('disabled', true);\n        });\n        container.on('focus', function (evt) {\n          self.$search.trigger('focus');\n        });\n        container.on('results:focus', function (params) {\n          if (params.data._resultId) {\n            self.$search.attr('aria-activedescendant', params.data._resultId);\n          } else {\n            self.$search.removeAttr('aria-activedescendant');\n          }\n        });\n        this.$selection.on('focusin', '.select2-search--inline', function (evt) {\n          self.trigger('focus', evt);\n        });\n        this.$selection.on('focusout', '.select2-search--inline', function (evt) {\n          self._handleBlur(evt);\n        });\n        this.$selection.on('keydown', '.select2-search--inline', function (evt) {\n          evt.stopPropagation();\n          self.trigger('keypress', evt);\n          self._keyUpPrevented = evt.isDefaultPrevented();\n          var key = evt.which;\n\n          if (key === KEYS.BACKSPACE && self.$search.val() === '') {\n            var $previousChoice = self.$searchContainer.prev('.select2-selection__choice');\n\n            if ($previousChoice.length > 0) {\n              var item = Utils.GetData($previousChoice[0], 'data');\n              self.searchRemoveChoice(item);\n              evt.preventDefault();\n            }\n          }\n        });\n        this.$selection.on('click', '.select2-search--inline', function (evt) {\n          if (self.$search.val()) {\n            evt.stopPropagation();\n          }\n        }); // Try to detect the IE version should the `documentMode` property that\n        // is stored on the document. This is only implemented in IE and is\n        // slightly cleaner than doing a user agent check.\n        // This property is not available in Edge, but Edge also doesn't have\n        // this bug.\n\n        var msie = document.documentMode;\n        var disableInputEvents = msie && msie <= 11; // Workaround for browsers which do not support the `input` event\n        // This will prevent double-triggering of events for browsers which support\n        // both the `keyup` and `input` events.\n\n        this.$selection.on('input.searchcheck', '.select2-search--inline', function (evt) {\n          // IE will trigger the `input` event when a placeholder is used on a\n          // search box. To get around this issue, we are forced to ignore all\n          // `input` events in IE and keep using `keyup`.\n          if (disableInputEvents) {\n            self.$selection.off('input.search input.searchcheck');\n            return;\n          } // Unbind the duplicated `keyup` event\n\n\n          self.$selection.off('keyup.search');\n        });\n        this.$selection.on('keyup.search input.search', '.select2-search--inline', function (evt) {\n          // IE will trigger the `input` event when a placeholder is used on a\n          // search box. To get around this issue, we are forced to ignore all\n          // `input` events in IE and keep using `keyup`.\n          if (disableInputEvents && evt.type === 'input') {\n            self.$selection.off('input.search input.searchcheck');\n            return;\n          }\n\n          var key = evt.which; // We can freely ignore events from modifier keys\n\n          if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {\n            return;\n          } // Tabbing will be handled during the `keydown` phase\n\n\n          if (key == KEYS.TAB) {\n            return;\n          }\n\n          self.handleSearch(evt);\n        });\n      };\n      /**\r\n       * This method will transfer the tabindex attribute from the rendered\r\n       * selection to the search box. This allows for the search box to be used as\r\n       * the primary focus instead of the selection container.\r\n       *\r\n       * @private\r\n       */\n\n\n      Search.prototype._transferTabIndex = function (decorated) {\n        this.$search.attr('tabindex', this.$selection.attr('tabindex'));\n        this.$selection.attr('tabindex', '-1');\n      };\n\n      Search.prototype.createPlaceholder = function (decorated, placeholder) {\n        this.$search.attr('placeholder', placeholder.text);\n      };\n\n      Search.prototype.update = function (decorated, data) {\n        var searchHadFocus = this.$search[0] == document.activeElement;\n        this.$search.attr('placeholder', '');\n        decorated.call(this, data);\n        this.$selection.find('.select2-selection__rendered').append(this.$searchContainer);\n        this.resizeSearch();\n\n        if (searchHadFocus) {\n          this.$search.trigger('focus');\n        }\n      };\n\n      Search.prototype.handleSearch = function () {\n        this.resizeSearch();\n\n        if (!this._keyUpPrevented) {\n          var input = this.$search.val();\n          this.trigger('query', {\n            term: input\n          });\n        }\n\n        this._keyUpPrevented = false;\n      };\n\n      Search.prototype.searchRemoveChoice = function (decorated, item) {\n        this.trigger('unselect', {\n          data: item\n        });\n        this.$search.val(item.text);\n        this.handleSearch();\n      };\n\n      Search.prototype.resizeSearch = function () {\n        this.$search.css('width', '25px');\n        var width = '';\n\n        if (this.$search.attr('placeholder') !== '') {\n          width = this.$selection.find('.select2-selection__rendered').width();\n        } else {\n          var minimumWidth = this.$search.val().length + 1;\n          width = minimumWidth * 0.75 + 'em';\n        }\n\n        this.$search.css('width', width);\n      };\n\n      return Search;\n    });\n    S2.define('select2/selection/eventRelay', ['jquery'], function ($) {\n      function EventRelay() {}\n\n      EventRelay.prototype.bind = function (decorated, container, $container) {\n        var self = this;\n        var relayEvents = ['open', 'opening', 'close', 'closing', 'select', 'selecting', 'unselect', 'unselecting', 'clear', 'clearing'];\n        var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting', 'clearing'];\n        decorated.call(this, container, $container);\n        container.on('*', function (name, params) {\n          // Ignore events that should not be relayed\n          if ($.inArray(name, relayEvents) === -1) {\n            return;\n          } // The parameters should always be an object\n\n\n          params = params || {}; // Generate the jQuery event for the Select2 event\n\n          var evt = $.Event('select2:' + name, {\n            params: params\n          });\n          self.$element.trigger(evt); // Only handle preventable events if it was one\n\n          if ($.inArray(name, preventableEvents) === -1) {\n            return;\n          }\n\n          params.prevented = evt.isDefaultPrevented();\n        });\n      };\n\n      return EventRelay;\n    });\n    S2.define('select2/translation', ['jquery', 'require'], function ($, require) {\n      function Translation(dict) {\n        this.dict = dict || {};\n      }\n\n      Translation.prototype.all = function () {\n        return this.dict;\n      };\n\n      Translation.prototype.get = function (key) {\n        return this.dict[key];\n      };\n\n      Translation.prototype.extend = function (translation) {\n        this.dict = $.extend({}, translation.all(), this.dict);\n      }; // Static functions\n\n\n      Translation._cache = {};\n\n      Translation.loadPath = function (path) {\n        if (!(path in Translation._cache)) {\n          var translations = require(path);\n\n          Translation._cache[path] = translations;\n        }\n\n        return new Translation(Translation._cache[path]);\n      };\n\n      return Translation;\n    });\n    S2.define('select2/diacritics', [], function () {\n      var diacritics = {\n        \"\\u24B6\": 'A',\n        \"\\uFF21\": 'A',\n        \"\\xC0\": 'A',\n        \"\\xC1\": 'A',\n        \"\\xC2\": 'A',\n        \"\\u1EA6\": 'A',\n        \"\\u1EA4\": 'A',\n        \"\\u1EAA\": 'A',\n        \"\\u1EA8\": 'A',\n        \"\\xC3\": 'A',\n        \"\\u0100\": 'A',\n        \"\\u0102\": 'A',\n        \"\\u1EB0\": 'A',\n        \"\\u1EAE\": 'A',\n        \"\\u1EB4\": 'A',\n        \"\\u1EB2\": 'A',\n        \"\\u0226\": 'A',\n        \"\\u01E0\": 'A',\n        \"\\xC4\": 'A',\n        \"\\u01DE\": 'A',\n        \"\\u1EA2\": 'A',\n        \"\\xC5\": 'A',\n        \"\\u01FA\": 'A',\n        \"\\u01CD\": 'A',\n        \"\\u0200\": 'A',\n        \"\\u0202\": 'A',\n        \"\\u1EA0\": 'A',\n        \"\\u1EAC\": 'A',\n        \"\\u1EB6\": 'A',\n        \"\\u1E00\": 'A',\n        \"\\u0104\": 'A',\n        \"\\u023A\": 'A',\n        \"\\u2C6F\": 'A',\n        \"\\uA732\": 'AA',\n        \"\\xC6\": 'AE',\n        \"\\u01FC\": 'AE',\n        \"\\u01E2\": 'AE',\n        \"\\uA734\": 'AO',\n        \"\\uA736\": 'AU',\n        \"\\uA738\": 'AV',\n        \"\\uA73A\": 'AV',\n        \"\\uA73C\": 'AY',\n        \"\\u24B7\": 'B',\n        \"\\uFF22\": 'B',\n        \"\\u1E02\": 'B',\n        \"\\u1E04\": 'B',\n        \"\\u1E06\": 'B',\n        \"\\u0243\": 'B',\n        \"\\u0182\": 'B',\n        \"\\u0181\": 'B',\n        \"\\u24B8\": 'C',\n        \"\\uFF23\": 'C',\n        \"\\u0106\": 'C',\n        \"\\u0108\": 'C',\n        \"\\u010A\": 'C',\n        \"\\u010C\": 'C',\n        \"\\xC7\": 'C',\n        \"\\u1E08\": 'C',\n        \"\\u0187\": 'C',\n        \"\\u023B\": 'C',\n        \"\\uA73E\": 'C',\n        \"\\u24B9\": 'D',\n        \"\\uFF24\": 'D',\n        \"\\u1E0A\": 'D',\n        \"\\u010E\": 'D',\n        \"\\u1E0C\": 'D',\n        \"\\u1E10\": 'D',\n        \"\\u1E12\": 'D',\n        \"\\u1E0E\": 'D',\n        \"\\u0110\": 'D',\n        \"\\u018B\": 'D',\n        \"\\u018A\": 'D',\n        \"\\u0189\": 'D',\n        \"\\uA779\": 'D',\n        \"\\u01F1\": 'DZ',\n        \"\\u01C4\": 'DZ',\n        \"\\u01F2\": 'Dz',\n        \"\\u01C5\": 'Dz',\n        \"\\u24BA\": 'E',\n        \"\\uFF25\": 'E',\n        \"\\xC8\": 'E',\n        \"\\xC9\": 'E',\n        \"\\xCA\": 'E',\n        \"\\u1EC0\": 'E',\n        \"\\u1EBE\": 'E',\n        \"\\u1EC4\": 'E',\n        \"\\u1EC2\": 'E',\n        \"\\u1EBC\": 'E',\n        \"\\u0112\": 'E',\n        \"\\u1E14\": 'E',\n        \"\\u1E16\": 'E',\n        \"\\u0114\": 'E',\n        \"\\u0116\": 'E',\n        \"\\xCB\": 'E',\n        \"\\u1EBA\": 'E',\n        \"\\u011A\": 'E',\n        \"\\u0204\": 'E',\n        \"\\u0206\": 'E',\n        \"\\u1EB8\": 'E',\n        \"\\u1EC6\": 'E',\n        \"\\u0228\": 'E',\n        \"\\u1E1C\": 'E',\n        \"\\u0118\": 'E',\n        \"\\u1E18\": 'E',\n        \"\\u1E1A\": 'E',\n        \"\\u0190\": 'E',\n        \"\\u018E\": 'E',\n        \"\\u24BB\": 'F',\n        \"\\uFF26\": 'F',\n        \"\\u1E1E\": 'F',\n        \"\\u0191\": 'F',\n        \"\\uA77B\": 'F',\n        \"\\u24BC\": 'G',\n        \"\\uFF27\": 'G',\n        \"\\u01F4\": 'G',\n        \"\\u011C\": 'G',\n        \"\\u1E20\": 'G',\n        \"\\u011E\": 'G',\n        \"\\u0120\": 'G',\n        \"\\u01E6\": 'G',\n        \"\\u0122\": 'G',\n        \"\\u01E4\": 'G',\n        \"\\u0193\": 'G',\n        \"\\uA7A0\": 'G',\n        \"\\uA77D\": 'G',\n        \"\\uA77E\": 'G',\n        \"\\u24BD\": 'H',\n        \"\\uFF28\": 'H',\n        \"\\u0124\": 'H',\n        \"\\u1E22\": 'H',\n        \"\\u1E26\": 'H',\n        \"\\u021E\": 'H',\n        \"\\u1E24\": 'H',\n        \"\\u1E28\": 'H',\n        \"\\u1E2A\": 'H',\n        \"\\u0126\": 'H',\n        \"\\u2C67\": 'H',\n        \"\\u2C75\": 'H',\n        \"\\uA78D\": 'H',\n        \"\\u24BE\": 'I',\n        \"\\uFF29\": 'I',\n        \"\\xCC\": 'I',\n        \"\\xCD\": 'I',\n        \"\\xCE\": 'I',\n        \"\\u0128\": 'I',\n        \"\\u012A\": 'I',\n        \"\\u012C\": 'I',\n        \"\\u0130\": 'I',\n        \"\\xCF\": 'I',\n        \"\\u1E2E\": 'I',\n        \"\\u1EC8\": 'I',\n        \"\\u01CF\": 'I',\n        \"\\u0208\": 'I',\n        \"\\u020A\": 'I',\n        \"\\u1ECA\": 'I',\n        \"\\u012E\": 'I',\n        \"\\u1E2C\": 'I',\n        \"\\u0197\": 'I',\n        \"\\u24BF\": 'J',\n        \"\\uFF2A\": 'J',\n        \"\\u0134\": 'J',\n        \"\\u0248\": 'J',\n        \"\\u24C0\": 'K',\n        \"\\uFF2B\": 'K',\n        \"\\u1E30\": 'K',\n        \"\\u01E8\": 'K',\n        \"\\u1E32\": 'K',\n        \"\\u0136\": 'K',\n        \"\\u1E34\": 'K',\n        \"\\u0198\": 'K',\n        \"\\u2C69\": 'K',\n        \"\\uA740\": 'K',\n        \"\\uA742\": 'K',\n        \"\\uA744\": 'K',\n        \"\\uA7A2\": 'K',\n        \"\\u24C1\": 'L',\n        \"\\uFF2C\": 'L',\n        \"\\u013F\": 'L',\n        \"\\u0139\": 'L',\n        \"\\u013D\": 'L',\n        \"\\u1E36\": 'L',\n        \"\\u1E38\": 'L',\n        \"\\u013B\": 'L',\n        \"\\u1E3C\": 'L',\n        \"\\u1E3A\": 'L',\n        \"\\u0141\": 'L',\n        \"\\u023D\": 'L',\n        \"\\u2C62\": 'L',\n        \"\\u2C60\": 'L',\n        \"\\uA748\": 'L',\n        \"\\uA746\": 'L',\n        \"\\uA780\": 'L',\n        \"\\u01C7\": 'LJ',\n        \"\\u01C8\": 'Lj',\n        \"\\u24C2\": 'M',\n        \"\\uFF2D\": 'M',\n        \"\\u1E3E\": 'M',\n        \"\\u1E40\": 'M',\n        \"\\u1E42\": 'M',\n        \"\\u2C6E\": 'M',\n        \"\\u019C\": 'M',\n        \"\\u24C3\": 'N',\n        \"\\uFF2E\": 'N',\n        \"\\u01F8\": 'N',\n        \"\\u0143\": 'N',\n        \"\\xD1\": 'N',\n        \"\\u1E44\": 'N',\n        \"\\u0147\": 'N',\n        \"\\u1E46\": 'N',\n        \"\\u0145\": 'N',\n        \"\\u1E4A\": 'N',\n        \"\\u1E48\": 'N',\n        \"\\u0220\": 'N',\n        \"\\u019D\": 'N',\n        \"\\uA790\": 'N',\n        \"\\uA7A4\": 'N',\n        \"\\u01CA\": 'NJ',\n        \"\\u01CB\": 'Nj',\n        \"\\u24C4\": 'O',\n        \"\\uFF2F\": 'O',\n        \"\\xD2\": 'O',\n        \"\\xD3\": 'O',\n        \"\\xD4\": 'O',\n        \"\\u1ED2\": 'O',\n        \"\\u1ED0\": 'O',\n        \"\\u1ED6\": 'O',\n        \"\\u1ED4\": 'O',\n        \"\\xD5\": 'O',\n        \"\\u1E4C\": 'O',\n        \"\\u022C\": 'O',\n        \"\\u1E4E\": 'O',\n        \"\\u014C\": 'O',\n        \"\\u1E50\": 'O',\n        \"\\u1E52\": 'O',\n        \"\\u014E\": 'O',\n        \"\\u022E\": 'O',\n        \"\\u0230\": 'O',\n        \"\\xD6\": 'O',\n        \"\\u022A\": 'O',\n        \"\\u1ECE\": 'O',\n        \"\\u0150\": 'O',\n        \"\\u01D1\": 'O',\n        \"\\u020C\": 'O',\n        \"\\u020E\": 'O',\n        \"\\u01A0\": 'O',\n        \"\\u1EDC\": 'O',\n        \"\\u1EDA\": 'O',\n        \"\\u1EE0\": 'O',\n        \"\\u1EDE\": 'O',\n        \"\\u1EE2\": 'O',\n        \"\\u1ECC\": 'O',\n        \"\\u1ED8\": 'O',\n        \"\\u01EA\": 'O',\n        \"\\u01EC\": 'O',\n        \"\\xD8\": 'O',\n        \"\\u01FE\": 'O',\n        \"\\u0186\": 'O',\n        \"\\u019F\": 'O',\n        \"\\uA74A\": 'O',\n        \"\\uA74C\": 'O',\n        \"\\u0152\": 'OE',\n        \"\\u01A2\": 'OI',\n        \"\\uA74E\": 'OO',\n        \"\\u0222\": 'OU',\n        \"\\u24C5\": 'P',\n        \"\\uFF30\": 'P',\n        \"\\u1E54\": 'P',\n        \"\\u1E56\": 'P',\n        \"\\u01A4\": 'P',\n        \"\\u2C63\": 'P',\n        \"\\uA750\": 'P',\n        \"\\uA752\": 'P',\n        \"\\uA754\": 'P',\n        \"\\u24C6\": 'Q',\n        \"\\uFF31\": 'Q',\n        \"\\uA756\": 'Q',\n        \"\\uA758\": 'Q',\n        \"\\u024A\": 'Q',\n        \"\\u24C7\": 'R',\n        \"\\uFF32\": 'R',\n        \"\\u0154\": 'R',\n        \"\\u1E58\": 'R',\n        \"\\u0158\": 'R',\n        \"\\u0210\": 'R',\n        \"\\u0212\": 'R',\n        \"\\u1E5A\": 'R',\n        \"\\u1E5C\": 'R',\n        \"\\u0156\": 'R',\n        \"\\u1E5E\": 'R',\n        \"\\u024C\": 'R',\n        \"\\u2C64\": 'R',\n        \"\\uA75A\": 'R',\n        \"\\uA7A6\": 'R',\n        \"\\uA782\": 'R',\n        \"\\u24C8\": 'S',\n        \"\\uFF33\": 'S',\n        \"\\u1E9E\": 'S',\n        \"\\u015A\": 'S',\n        \"\\u1E64\": 'S',\n        \"\\u015C\": 'S',\n        \"\\u1E60\": 'S',\n        \"\\u0160\": 'S',\n        \"\\u1E66\": 'S',\n        \"\\u1E62\": 'S',\n        \"\\u1E68\": 'S',\n        \"\\u0218\": 'S',\n        \"\\u015E\": 'S',\n        \"\\u2C7E\": 'S',\n        \"\\uA7A8\": 'S',\n        \"\\uA784\": 'S',\n        \"\\u24C9\": 'T',\n        \"\\uFF34\": 'T',\n        \"\\u1E6A\": 'T',\n        \"\\u0164\": 'T',\n        \"\\u1E6C\": 'T',\n        \"\\u021A\": 'T',\n        \"\\u0162\": 'T',\n        \"\\u1E70\": 'T',\n        \"\\u1E6E\": 'T',\n        \"\\u0166\": 'T',\n        \"\\u01AC\": 'T',\n        \"\\u01AE\": 'T',\n        \"\\u023E\": 'T',\n        \"\\uA786\": 'T',\n        \"\\uA728\": 'TZ',\n        \"\\u24CA\": 'U',\n        \"\\uFF35\": 'U',\n        \"\\xD9\": 'U',\n        \"\\xDA\": 'U',\n        \"\\xDB\": 'U',\n        \"\\u0168\": 'U',\n        \"\\u1E78\": 'U',\n        \"\\u016A\": 'U',\n        \"\\u1E7A\": 'U',\n        \"\\u016C\": 'U',\n        \"\\xDC\": 'U',\n        \"\\u01DB\": 'U',\n        \"\\u01D7\": 'U',\n        \"\\u01D5\": 'U',\n        \"\\u01D9\": 'U',\n        \"\\u1EE6\": 'U',\n        \"\\u016E\": 'U',\n        \"\\u0170\": 'U',\n        \"\\u01D3\": 'U',\n        \"\\u0214\": 'U',\n        \"\\u0216\": 'U',\n        \"\\u01AF\": 'U',\n        \"\\u1EEA\": 'U',\n        \"\\u1EE8\": 'U',\n        \"\\u1EEE\": 'U',\n        \"\\u1EEC\": 'U',\n        \"\\u1EF0\": 'U',\n        \"\\u1EE4\": 'U',\n        \"\\u1E72\": 'U',\n        \"\\u0172\": 'U',\n        \"\\u1E76\": 'U',\n        \"\\u1E74\": 'U',\n        \"\\u0244\": 'U',\n        \"\\u24CB\": 'V',\n        \"\\uFF36\": 'V',\n        \"\\u1E7C\": 'V',\n        \"\\u1E7E\": 'V',\n        \"\\u01B2\": 'V',\n        \"\\uA75E\": 'V',\n        \"\\u0245\": 'V',\n        \"\\uA760\": 'VY',\n        \"\\u24CC\": 'W',\n        \"\\uFF37\": 'W',\n        \"\\u1E80\": 'W',\n        \"\\u1E82\": 'W',\n        \"\\u0174\": 'W',\n        \"\\u1E86\": 'W',\n        \"\\u1E84\": 'W',\n        \"\\u1E88\": 'W',\n        \"\\u2C72\": 'W',\n        \"\\u24CD\": 'X',\n        \"\\uFF38\": 'X',\n        \"\\u1E8A\": 'X',\n        \"\\u1E8C\": 'X',\n        \"\\u24CE\": 'Y',\n        \"\\uFF39\": 'Y',\n        \"\\u1EF2\": 'Y',\n        \"\\xDD\": 'Y',\n        \"\\u0176\": 'Y',\n        \"\\u1EF8\": 'Y',\n        \"\\u0232\": 'Y',\n        \"\\u1E8E\": 'Y',\n        \"\\u0178\": 'Y',\n        \"\\u1EF6\": 'Y',\n        \"\\u1EF4\": 'Y',\n        \"\\u01B3\": 'Y',\n        \"\\u024E\": 'Y',\n        \"\\u1EFE\": 'Y',\n        \"\\u24CF\": 'Z',\n        \"\\uFF3A\": 'Z',\n        \"\\u0179\": 'Z',\n        \"\\u1E90\": 'Z',\n        \"\\u017B\": 'Z',\n        \"\\u017D\": 'Z',\n        \"\\u1E92\": 'Z',\n        \"\\u1E94\": 'Z',\n        \"\\u01B5\": 'Z',\n        \"\\u0224\": 'Z',\n        \"\\u2C7F\": 'Z',\n        \"\\u2C6B\": 'Z',\n        \"\\uA762\": 'Z',\n        \"\\u24D0\": 'a',\n        \"\\uFF41\": 'a',\n        \"\\u1E9A\": 'a',\n        \"\\xE0\": 'a',\n        \"\\xE1\": 'a',\n        \"\\xE2\": 'a',\n        \"\\u1EA7\": 'a',\n        \"\\u1EA5\": 'a',\n        \"\\u1EAB\": 'a',\n        \"\\u1EA9\": 'a',\n        \"\\xE3\": 'a',\n        \"\\u0101\": 'a',\n        \"\\u0103\": 'a',\n        \"\\u1EB1\": 'a',\n        \"\\u1EAF\": 'a',\n        \"\\u1EB5\": 'a',\n        \"\\u1EB3\": 'a',\n        \"\\u0227\": 'a',\n        \"\\u01E1\": 'a',\n        \"\\xE4\": 'a',\n        \"\\u01DF\": 'a',\n        \"\\u1EA3\": 'a',\n        \"\\xE5\": 'a',\n        \"\\u01FB\": 'a',\n        \"\\u01CE\": 'a',\n        \"\\u0201\": 'a',\n        \"\\u0203\": 'a',\n        \"\\u1EA1\": 'a',\n        \"\\u1EAD\": 'a',\n        \"\\u1EB7\": 'a',\n        \"\\u1E01\": 'a',\n        \"\\u0105\": 'a',\n        \"\\u2C65\": 'a',\n        \"\\u0250\": 'a',\n        \"\\uA733\": 'aa',\n        \"\\xE6\": 'ae',\n        \"\\u01FD\": 'ae',\n        \"\\u01E3\": 'ae',\n        \"\\uA735\": 'ao',\n        \"\\uA737\": 'au',\n        \"\\uA739\": 'av',\n        \"\\uA73B\": 'av',\n        \"\\uA73D\": 'ay',\n        \"\\u24D1\": 'b',\n        \"\\uFF42\": 'b',\n        \"\\u1E03\": 'b',\n        \"\\u1E05\": 'b',\n        \"\\u1E07\": 'b',\n        \"\\u0180\": 'b',\n        \"\\u0183\": 'b',\n        \"\\u0253\": 'b',\n        \"\\u24D2\": 'c',\n        \"\\uFF43\": 'c',\n        \"\\u0107\": 'c',\n        \"\\u0109\": 'c',\n        \"\\u010B\": 'c',\n        \"\\u010D\": 'c',\n        \"\\xE7\": 'c',\n        \"\\u1E09\": 'c',\n        \"\\u0188\": 'c',\n        \"\\u023C\": 'c',\n        \"\\uA73F\": 'c',\n        \"\\u2184\": 'c',\n        \"\\u24D3\": 'd',\n        \"\\uFF44\": 'd',\n        \"\\u1E0B\": 'd',\n        \"\\u010F\": 'd',\n        \"\\u1E0D\": 'd',\n        \"\\u1E11\": 'd',\n        \"\\u1E13\": 'd',\n        \"\\u1E0F\": 'd',\n        \"\\u0111\": 'd',\n        \"\\u018C\": 'd',\n        \"\\u0256\": 'd',\n        \"\\u0257\": 'd',\n        \"\\uA77A\": 'd',\n        \"\\u01F3\": 'dz',\n        \"\\u01C6\": 'dz',\n        \"\\u24D4\": 'e',\n        \"\\uFF45\": 'e',\n        \"\\xE8\": 'e',\n        \"\\xE9\": 'e',\n        \"\\xEA\": 'e',\n        \"\\u1EC1\": 'e',\n        \"\\u1EBF\": 'e',\n        \"\\u1EC5\": 'e',\n        \"\\u1EC3\": 'e',\n        \"\\u1EBD\": 'e',\n        \"\\u0113\": 'e',\n        \"\\u1E15\": 'e',\n        \"\\u1E17\": 'e',\n        \"\\u0115\": 'e',\n        \"\\u0117\": 'e',\n        \"\\xEB\": 'e',\n        \"\\u1EBB\": 'e',\n        \"\\u011B\": 'e',\n        \"\\u0205\": 'e',\n        \"\\u0207\": 'e',\n        \"\\u1EB9\": 'e',\n        \"\\u1EC7\": 'e',\n        \"\\u0229\": 'e',\n        \"\\u1E1D\": 'e',\n        \"\\u0119\": 'e',\n        \"\\u1E19\": 'e',\n        \"\\u1E1B\": 'e',\n        \"\\u0247\": 'e',\n        \"\\u025B\": 'e',\n        \"\\u01DD\": 'e',\n        \"\\u24D5\": 'f',\n        \"\\uFF46\": 'f',\n        \"\\u1E1F\": 'f',\n        \"\\u0192\": 'f',\n        \"\\uA77C\": 'f',\n        \"\\u24D6\": 'g',\n        \"\\uFF47\": 'g',\n        \"\\u01F5\": 'g',\n        \"\\u011D\": 'g',\n        \"\\u1E21\": 'g',\n        \"\\u011F\": 'g',\n        \"\\u0121\": 'g',\n        \"\\u01E7\": 'g',\n        \"\\u0123\": 'g',\n        \"\\u01E5\": 'g',\n        \"\\u0260\": 'g',\n        \"\\uA7A1\": 'g',\n        \"\\u1D79\": 'g',\n        \"\\uA77F\": 'g',\n        \"\\u24D7\": 'h',\n        \"\\uFF48\": 'h',\n        \"\\u0125\": 'h',\n        \"\\u1E23\": 'h',\n        \"\\u1E27\": 'h',\n        \"\\u021F\": 'h',\n        \"\\u1E25\": 'h',\n        \"\\u1E29\": 'h',\n        \"\\u1E2B\": 'h',\n        \"\\u1E96\": 'h',\n        \"\\u0127\": 'h',\n        \"\\u2C68\": 'h',\n        \"\\u2C76\": 'h',\n        \"\\u0265\": 'h',\n        \"\\u0195\": 'hv',\n        \"\\u24D8\": 'i',\n        \"\\uFF49\": 'i',\n        \"\\xEC\": 'i',\n        \"\\xED\": 'i',\n        \"\\xEE\": 'i',\n        \"\\u0129\": 'i',\n        \"\\u012B\": 'i',\n        \"\\u012D\": 'i',\n        \"\\xEF\": 'i',\n        \"\\u1E2F\": 'i',\n        \"\\u1EC9\": 'i',\n        \"\\u01D0\": 'i',\n        \"\\u0209\": 'i',\n        \"\\u020B\": 'i',\n        \"\\u1ECB\": 'i',\n        \"\\u012F\": 'i',\n        \"\\u1E2D\": 'i',\n        \"\\u0268\": 'i',\n        \"\\u0131\": 'i',\n        \"\\u24D9\": 'j',\n        \"\\uFF4A\": 'j',\n        \"\\u0135\": 'j',\n        \"\\u01F0\": 'j',\n        \"\\u0249\": 'j',\n        \"\\u24DA\": 'k',\n        \"\\uFF4B\": 'k',\n        \"\\u1E31\": 'k',\n        \"\\u01E9\": 'k',\n        \"\\u1E33\": 'k',\n        \"\\u0137\": 'k',\n        \"\\u1E35\": 'k',\n        \"\\u0199\": 'k',\n        \"\\u2C6A\": 'k',\n        \"\\uA741\": 'k',\n        \"\\uA743\": 'k',\n        \"\\uA745\": 'k',\n        \"\\uA7A3\": 'k',\n        \"\\u24DB\": 'l',\n        \"\\uFF4C\": 'l',\n        \"\\u0140\": 'l',\n        \"\\u013A\": 'l',\n        \"\\u013E\": 'l',\n        \"\\u1E37\": 'l',\n        \"\\u1E39\": 'l',\n        \"\\u013C\": 'l',\n        \"\\u1E3D\": 'l',\n        \"\\u1E3B\": 'l',\n        \"\\u017F\": 'l',\n        \"\\u0142\": 'l',\n        \"\\u019A\": 'l',\n        \"\\u026B\": 'l',\n        \"\\u2C61\": 'l',\n        \"\\uA749\": 'l',\n        \"\\uA781\": 'l',\n        \"\\uA747\": 'l',\n        \"\\u01C9\": 'lj',\n        \"\\u24DC\": 'm',\n        \"\\uFF4D\": 'm',\n        \"\\u1E3F\": 'm',\n        \"\\u1E41\": 'm',\n        \"\\u1E43\": 'm',\n        \"\\u0271\": 'm',\n        \"\\u026F\": 'm',\n        \"\\u24DD\": 'n',\n        \"\\uFF4E\": 'n',\n        \"\\u01F9\": 'n',\n        \"\\u0144\": 'n',\n        \"\\xF1\": 'n',\n        \"\\u1E45\": 'n',\n        \"\\u0148\": 'n',\n        \"\\u1E47\": 'n',\n        \"\\u0146\": 'n',\n        \"\\u1E4B\": 'n',\n        \"\\u1E49\": 'n',\n        \"\\u019E\": 'n',\n        \"\\u0272\": 'n',\n        \"\\u0149\": 'n',\n        \"\\uA791\": 'n',\n        \"\\uA7A5\": 'n',\n        \"\\u01CC\": 'nj',\n        \"\\u24DE\": 'o',\n        \"\\uFF4F\": 'o',\n        \"\\xF2\": 'o',\n        \"\\xF3\": 'o',\n        \"\\xF4\": 'o',\n        \"\\u1ED3\": 'o',\n        \"\\u1ED1\": 'o',\n        \"\\u1ED7\": 'o',\n        \"\\u1ED5\": 'o',\n        \"\\xF5\": 'o',\n        \"\\u1E4D\": 'o',\n        \"\\u022D\": 'o',\n        \"\\u1E4F\": 'o',\n        \"\\u014D\": 'o',\n        \"\\u1E51\": 'o',\n        \"\\u1E53\": 'o',\n        \"\\u014F\": 'o',\n        \"\\u022F\": 'o',\n        \"\\u0231\": 'o',\n        \"\\xF6\": 'o',\n        \"\\u022B\": 'o',\n        \"\\u1ECF\": 'o',\n        \"\\u0151\": 'o',\n        \"\\u01D2\": 'o',\n        \"\\u020D\": 'o',\n        \"\\u020F\": 'o',\n        \"\\u01A1\": 'o',\n        \"\\u1EDD\": 'o',\n        \"\\u1EDB\": 'o',\n        \"\\u1EE1\": 'o',\n        \"\\u1EDF\": 'o',\n        \"\\u1EE3\": 'o',\n        \"\\u1ECD\": 'o',\n        \"\\u1ED9\": 'o',\n        \"\\u01EB\": 'o',\n        \"\\u01ED\": 'o',\n        \"\\xF8\": 'o',\n        \"\\u01FF\": 'o',\n        \"\\u0254\": 'o',\n        \"\\uA74B\": 'o',\n        \"\\uA74D\": 'o',\n        \"\\u0275\": 'o',\n        \"\\u0153\": 'oe',\n        \"\\u01A3\": 'oi',\n        \"\\u0223\": 'ou',\n        \"\\uA74F\": 'oo',\n        \"\\u24DF\": 'p',\n        \"\\uFF50\": 'p',\n        \"\\u1E55\": 'p',\n        \"\\u1E57\": 'p',\n        \"\\u01A5\": 'p',\n        \"\\u1D7D\": 'p',\n        \"\\uA751\": 'p',\n        \"\\uA753\": 'p',\n        \"\\uA755\": 'p',\n        \"\\u24E0\": 'q',\n        \"\\uFF51\": 'q',\n        \"\\u024B\": 'q',\n        \"\\uA757\": 'q',\n        \"\\uA759\": 'q',\n        \"\\u24E1\": 'r',\n        \"\\uFF52\": 'r',\n        \"\\u0155\": 'r',\n        \"\\u1E59\": 'r',\n        \"\\u0159\": 'r',\n        \"\\u0211\": 'r',\n        \"\\u0213\": 'r',\n        \"\\u1E5B\": 'r',\n        \"\\u1E5D\": 'r',\n        \"\\u0157\": 'r',\n        \"\\u1E5F\": 'r',\n        \"\\u024D\": 'r',\n        \"\\u027D\": 'r',\n        \"\\uA75B\": 'r',\n        \"\\uA7A7\": 'r',\n        \"\\uA783\": 'r',\n        \"\\u24E2\": 's',\n        \"\\uFF53\": 's',\n        \"\\xDF\": 's',\n        \"\\u015B\": 's',\n        \"\\u1E65\": 's',\n        \"\\u015D\": 's',\n        \"\\u1E61\": 's',\n        \"\\u0161\": 's',\n        \"\\u1E67\": 's',\n        \"\\u1E63\": 's',\n        \"\\u1E69\": 's',\n        \"\\u0219\": 's',\n        \"\\u015F\": 's',\n        \"\\u023F\": 's',\n        \"\\uA7A9\": 's',\n        \"\\uA785\": 's',\n        \"\\u1E9B\": 's',\n        \"\\u24E3\": 't',\n        \"\\uFF54\": 't',\n        \"\\u1E6B\": 't',\n        \"\\u1E97\": 't',\n        \"\\u0165\": 't',\n        \"\\u1E6D\": 't',\n        \"\\u021B\": 't',\n        \"\\u0163\": 't',\n        \"\\u1E71\": 't',\n        \"\\u1E6F\": 't',\n        \"\\u0167\": 't',\n        \"\\u01AD\": 't',\n        \"\\u0288\": 't',\n        \"\\u2C66\": 't',\n        \"\\uA787\": 't',\n        \"\\uA729\": 'tz',\n        \"\\u24E4\": 'u',\n        \"\\uFF55\": 'u',\n        \"\\xF9\": 'u',\n        \"\\xFA\": 'u',\n        \"\\xFB\": 'u',\n        \"\\u0169\": 'u',\n        \"\\u1E79\": 'u',\n        \"\\u016B\": 'u',\n        \"\\u1E7B\": 'u',\n        \"\\u016D\": 'u',\n        \"\\xFC\": 'u',\n        \"\\u01DC\": 'u',\n        \"\\u01D8\": 'u',\n        \"\\u01D6\": 'u',\n        \"\\u01DA\": 'u',\n        \"\\u1EE7\": 'u',\n        \"\\u016F\": 'u',\n        \"\\u0171\": 'u',\n        \"\\u01D4\": 'u',\n        \"\\u0215\": 'u',\n        \"\\u0217\": 'u',\n        \"\\u01B0\": 'u',\n        \"\\u1EEB\": 'u',\n        \"\\u1EE9\": 'u',\n        \"\\u1EEF\": 'u',\n        \"\\u1EED\": 'u',\n        \"\\u1EF1\": 'u',\n        \"\\u1EE5\": 'u',\n        \"\\u1E73\": 'u',\n        \"\\u0173\": 'u',\n        \"\\u1E77\": 'u',\n        \"\\u1E75\": 'u',\n        \"\\u0289\": 'u',\n        \"\\u24E5\": 'v',\n        \"\\uFF56\": 'v',\n        \"\\u1E7D\": 'v',\n        \"\\u1E7F\": 'v',\n        \"\\u028B\": 'v',\n        \"\\uA75F\": 'v',\n        \"\\u028C\": 'v',\n        \"\\uA761\": 'vy',\n        \"\\u24E6\": 'w',\n        \"\\uFF57\": 'w',\n        \"\\u1E81\": 'w',\n        \"\\u1E83\": 'w',\n        \"\\u0175\": 'w',\n        \"\\u1E87\": 'w',\n        \"\\u1E85\": 'w',\n        \"\\u1E98\": 'w',\n        \"\\u1E89\": 'w',\n        \"\\u2C73\": 'w',\n        \"\\u24E7\": 'x',\n        \"\\uFF58\": 'x',\n        \"\\u1E8B\": 'x',\n        \"\\u1E8D\": 'x',\n        \"\\u24E8\": 'y',\n        \"\\uFF59\": 'y',\n        \"\\u1EF3\": 'y',\n        \"\\xFD\": 'y',\n        \"\\u0177\": 'y',\n        \"\\u1EF9\": 'y',\n        \"\\u0233\": 'y',\n        \"\\u1E8F\": 'y',\n        \"\\xFF\": 'y',\n        \"\\u1EF7\": 'y',\n        \"\\u1E99\": 'y',\n        \"\\u1EF5\": 'y',\n        \"\\u01B4\": 'y',\n        \"\\u024F\": 'y',\n        \"\\u1EFF\": 'y',\n        \"\\u24E9\": 'z',\n        \"\\uFF5A\": 'z',\n        \"\\u017A\": 'z',\n        \"\\u1E91\": 'z',\n        \"\\u017C\": 'z',\n        \"\\u017E\": 'z',\n        \"\\u1E93\": 'z',\n        \"\\u1E95\": 'z',\n        \"\\u01B6\": 'z',\n        \"\\u0225\": 'z',\n        \"\\u0240\": 'z',\n        \"\\u2C6C\": 'z',\n        \"\\uA763\": 'z',\n        \"\\u0386\": \"\\u0391\",\n        \"\\u0388\": \"\\u0395\",\n        \"\\u0389\": \"\\u0397\",\n        \"\\u038A\": \"\\u0399\",\n        \"\\u03AA\": \"\\u0399\",\n        \"\\u038C\": \"\\u039F\",\n        \"\\u038E\": \"\\u03A5\",\n        \"\\u03AB\": \"\\u03A5\",\n        \"\\u038F\": \"\\u03A9\",\n        \"\\u03AC\": \"\\u03B1\",\n        \"\\u03AD\": \"\\u03B5\",\n        \"\\u03AE\": \"\\u03B7\",\n        \"\\u03AF\": \"\\u03B9\",\n        \"\\u03CA\": \"\\u03B9\",\n        \"\\u0390\": \"\\u03B9\",\n        \"\\u03CC\": \"\\u03BF\",\n        \"\\u03CD\": \"\\u03C5\",\n        \"\\u03CB\": \"\\u03C5\",\n        \"\\u03B0\": \"\\u03C5\",\n        \"\\u03CE\": \"\\u03C9\",\n        \"\\u03C2\": \"\\u03C3\",\n        \"\\u2019\": '\\''\n      };\n      return diacritics;\n    });\n    S2.define('select2/data/base', ['../utils'], function (Utils) {\n      function BaseAdapter($element, options) {\n        BaseAdapter.__super__.constructor.call(this);\n      }\n\n      Utils.Extend(BaseAdapter, Utils.Observable);\n\n      BaseAdapter.prototype.current = function (callback) {\n        throw new Error('The `current` method must be defined in child classes.');\n      };\n\n      BaseAdapter.prototype.query = function (params, callback) {\n        throw new Error('The `query` method must be defined in child classes.');\n      };\n\n      BaseAdapter.prototype.bind = function (container, $container) {// Can be implemented in subclasses\n      };\n\n      BaseAdapter.prototype.destroy = function () {// Can be implemented in subclasses\n      };\n\n      BaseAdapter.prototype.generateResultId = function (container, data) {\n        var id = container.id + '-result-';\n        id += Utils.generateChars(4);\n\n        if (data.id != null) {\n          id += '-' + data.id.toString();\n        } else {\n          id += '-' + Utils.generateChars(4);\n        }\n\n        return id;\n      };\n\n      return BaseAdapter;\n    });\n    S2.define('select2/data/select', ['./base', '../utils', 'jquery'], function (BaseAdapter, Utils, $) {\n      function SelectAdapter($element, options) {\n        this.$element = $element;\n        this.options = options;\n\n        SelectAdapter.__super__.constructor.call(this);\n      }\n\n      Utils.Extend(SelectAdapter, BaseAdapter);\n\n      SelectAdapter.prototype.current = function (callback) {\n        var data = [];\n        var self = this;\n        this.$element.find(':selected').each(function () {\n          var $option = $(this);\n          var option = self.item($option);\n          data.push(option);\n        });\n        callback(data);\n      };\n\n      SelectAdapter.prototype.select = function (data) {\n        var self = this;\n        data.selected = true; // If data.element is a DOM node, use it instead\n\n        if ($(data.element).is('option')) {\n          data.element.selected = true;\n          this.$element.trigger('input').trigger('change');\n          return;\n        }\n\n        if (this.$element.prop('multiple')) {\n          this.current(function (currentData) {\n            var val = [];\n            data = [data];\n            data.push.apply(data, currentData);\n\n            for (var d = 0; d < data.length; d++) {\n              var id = data[d].id;\n\n              if ($.inArray(id, val) === -1) {\n                val.push(id);\n              }\n            }\n\n            self.$element.val(val);\n            self.$element.trigger('input').trigger('change');\n          });\n        } else {\n          var val = data.id;\n          this.$element.val(val);\n          this.$element.trigger('input').trigger('change');\n        }\n      };\n\n      SelectAdapter.prototype.unselect = function (data) {\n        var self = this;\n\n        if (!this.$element.prop('multiple')) {\n          return;\n        }\n\n        data.selected = false;\n\n        if ($(data.element).is('option')) {\n          data.element.selected = false;\n          this.$element.trigger('input').trigger('change');\n          return;\n        }\n\n        this.current(function (currentData) {\n          var val = [];\n\n          for (var d = 0; d < currentData.length; d++) {\n            var id = currentData[d].id;\n\n            if (id !== data.id && $.inArray(id, val) === -1) {\n              val.push(id);\n            }\n          }\n\n          self.$element.val(val);\n          self.$element.trigger('input').trigger('change');\n        });\n      };\n\n      SelectAdapter.prototype.bind = function (container, $container) {\n        var self = this;\n        this.container = container;\n        container.on('select', function (params) {\n          self.select(params.data);\n        });\n        container.on('unselect', function (params) {\n          self.unselect(params.data);\n        });\n      };\n\n      SelectAdapter.prototype.destroy = function () {\n        // Remove anything added to child elements\n        this.$element.find('*').each(function () {\n          // Remove any custom data set by Select2\n          Utils.RemoveData(this);\n        });\n      };\n\n      SelectAdapter.prototype.query = function (params, callback) {\n        var data = [];\n        var self = this;\n        var $options = this.$element.children();\n        $options.each(function () {\n          var $option = $(this);\n\n          if (!$option.is('option') && !$option.is('optgroup')) {\n            return;\n          }\n\n          var option = self.item($option);\n          var matches = self.matches(params, option);\n\n          if (matches !== null) {\n            data.push(matches);\n          }\n        });\n        callback({\n          results: data\n        });\n      };\n\n      SelectAdapter.prototype.addOptions = function ($options) {\n        Utils.appendMany(this.$element, $options);\n      };\n\n      SelectAdapter.prototype.option = function (data) {\n        var option;\n\n        if (data.children) {\n          option = document.createElement('optgroup');\n          option.label = data.text;\n        } else {\n          option = document.createElement('option');\n\n          if (option.textContent !== undefined) {\n            option.textContent = data.text;\n          } else {\n            option.innerText = data.text;\n          }\n        }\n\n        if (data.id !== undefined) {\n          option.value = data.id;\n        }\n\n        if (data.disabled) {\n          option.disabled = true;\n        }\n\n        if (data.selected) {\n          option.selected = true;\n        }\n\n        if (data.title) {\n          option.title = data.title;\n        }\n\n        var $option = $(option);\n\n        var normalizedData = this._normalizeItem(data);\n\n        normalizedData.element = option; // Override the option's data with the combined data\n\n        Utils.StoreData(option, 'data', normalizedData);\n        return $option;\n      };\n\n      SelectAdapter.prototype.item = function ($option) {\n        var data = {};\n        data = Utils.GetData($option[0], 'data');\n\n        if (data != null) {\n          return data;\n        }\n\n        if ($option.is('option')) {\n          data = {\n            id: $option.val(),\n            text: $option.text(),\n            disabled: $option.prop('disabled'),\n            selected: $option.prop('selected'),\n            title: $option.prop('title')\n          };\n        } else if ($option.is('optgroup')) {\n          data = {\n            text: $option.prop('label'),\n            children: [],\n            title: $option.prop('title')\n          };\n          var $children = $option.children('option');\n          var children = [];\n\n          for (var c = 0; c < $children.length; c++) {\n            var $child = $($children[c]);\n            var child = this.item($child);\n            children.push(child);\n          }\n\n          data.children = children;\n        }\n\n        data = this._normalizeItem(data);\n        data.element = $option[0];\n        Utils.StoreData($option[0], 'data', data);\n        return data;\n      };\n\n      SelectAdapter.prototype._normalizeItem = function (item) {\n        if (item !== Object(item)) {\n          item = {\n            id: item,\n            text: item\n          };\n        }\n\n        item = $.extend({}, {\n          text: ''\n        }, item);\n        var defaults = {\n          selected: false,\n          disabled: false\n        };\n\n        if (item.id != null) {\n          item.id = item.id.toString();\n        }\n\n        if (item.text != null) {\n          item.text = item.text.toString();\n        }\n\n        if (item._resultId == null && item.id && this.container != null) {\n          item._resultId = this.generateResultId(this.container, item);\n        }\n\n        return $.extend({}, defaults, item);\n      };\n\n      SelectAdapter.prototype.matches = function (params, data) {\n        var matcher = this.options.get('matcher');\n        return matcher(params, data);\n      };\n\n      return SelectAdapter;\n    });\n    S2.define('select2/data/array', ['./select', '../utils', 'jquery'], function (SelectAdapter, Utils, $) {\n      function ArrayAdapter($element, options) {\n        this._dataToConvert = options.get('data') || [];\n\n        ArrayAdapter.__super__.constructor.call(this, $element, options);\n      }\n\n      Utils.Extend(ArrayAdapter, SelectAdapter);\n\n      ArrayAdapter.prototype.bind = function (container, $container) {\n        ArrayAdapter.__super__.bind.call(this, container, $container);\n\n        this.addOptions(this.convertToOptions(this._dataToConvert));\n      };\n\n      ArrayAdapter.prototype.select = function (data) {\n        var $option = this.$element.find('option').filter(function (i, elm) {\n          return elm.value == data.id.toString();\n        });\n\n        if ($option.length === 0) {\n          $option = this.option(data);\n          this.addOptions($option);\n        }\n\n        ArrayAdapter.__super__.select.call(this, data);\n      };\n\n      ArrayAdapter.prototype.convertToOptions = function (data) {\n        var self = this;\n        var $existing = this.$element.find('option');\n        var existingIds = $existing.map(function () {\n          return self.item($(this)).id;\n        }).get();\n        var $options = []; // Filter out all items except for the one passed in the argument\n\n        function onlyItem(item) {\n          return function () {\n            return $(this).val() == item.id;\n          };\n        }\n\n        for (var d = 0; d < data.length; d++) {\n          var item = this._normalizeItem(data[d]); // Skip items which were pre-loaded, only merge the data\n\n\n          if ($.inArray(item.id, existingIds) >= 0) {\n            var $existingOption = $existing.filter(onlyItem(item));\n            var existingData = this.item($existingOption);\n            var newData = $.extend(true, {}, item, existingData);\n            var $newOption = this.option(newData);\n            $existingOption.replaceWith($newOption);\n            continue;\n          }\n\n          var $option = this.option(item);\n\n          if (item.children) {\n            var $children = this.convertToOptions(item.children);\n            Utils.appendMany($option, $children);\n          }\n\n          $options.push($option);\n        }\n\n        return $options;\n      };\n\n      return ArrayAdapter;\n    });\n    S2.define('select2/data/ajax', ['./array', '../utils', 'jquery'], function (ArrayAdapter, Utils, $) {\n      function AjaxAdapter($element, options) {\n        this.ajaxOptions = this._applyDefaults(options.get('ajax'));\n\n        if (this.ajaxOptions.processResults != null) {\n          this.processResults = this.ajaxOptions.processResults;\n        }\n\n        AjaxAdapter.__super__.constructor.call(this, $element, options);\n      }\n\n      Utils.Extend(AjaxAdapter, ArrayAdapter);\n\n      AjaxAdapter.prototype._applyDefaults = function (options) {\n        var defaults = {\n          data: function data(params) {\n            return $.extend({}, params, {\n              q: params.term\n            });\n          },\n          transport: function transport(params, success, failure) {\n            var $request = $.ajax(params);\n            $request.then(success);\n            $request.fail(failure);\n            return $request;\n          }\n        };\n        return $.extend({}, defaults, options, true);\n      };\n\n      AjaxAdapter.prototype.processResults = function (results) {\n        return results;\n      };\n\n      AjaxAdapter.prototype.query = function (params, callback) {\n        var matches = [];\n        var self = this;\n\n        if (this._request != null) {\n          // JSONP requests cannot always be aborted\n          if ($.isFunction(this._request.abort)) {\n            this._request.abort();\n          }\n\n          this._request = null;\n        }\n\n        var options = $.extend({\n          type: 'GET'\n        }, this.ajaxOptions);\n\n        if (typeof options.url === 'function') {\n          options.url = options.url.call(this.$element, params);\n        }\n\n        if (typeof options.data === 'function') {\n          options.data = options.data.call(this.$element, params);\n        }\n\n        function request() {\n          var $request = options.transport(options, function (data) {\n            var results = self.processResults(data, params);\n\n            if (self.options.get('debug') && window.console && console.error) {\n              // Check to make sure that the response included a `results` key.\n              if (!results || !results.results || !$.isArray(results.results)) {\n                console.error('Select2: The AJAX results did not return an array in the ' + '`results` key of the response.');\n              }\n            }\n\n            callback(results);\n          }, function () {\n            // Attempt to detect if a request was aborted\n            // Only works if the transport exposes a status property\n            if ('status' in $request && ($request.status === 0 || $request.status === '0')) {\n              return;\n            }\n\n            self.trigger('results:message', {\n              message: 'errorLoading'\n            });\n          });\n          self._request = $request;\n        }\n\n        if (this.ajaxOptions.delay && params.term != null) {\n          if (this._queryTimeout) {\n            window.clearTimeout(this._queryTimeout);\n          }\n\n          this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);\n        } else {\n          request();\n        }\n      };\n\n      return AjaxAdapter;\n    });\n    S2.define('select2/data/tags', ['jquery'], function ($) {\n      function Tags(decorated, $element, options) {\n        var tags = options.get('tags');\n        var createTag = options.get('createTag');\n\n        if (createTag !== undefined) {\n          this.createTag = createTag;\n        }\n\n        var insertTag = options.get('insertTag');\n\n        if (insertTag !== undefined) {\n          this.insertTag = insertTag;\n        }\n\n        decorated.call(this, $element, options);\n\n        if ($.isArray(tags)) {\n          for (var t = 0; t < tags.length; t++) {\n            var tag = tags[t];\n\n            var item = this._normalizeItem(tag);\n\n            var $option = this.option(item);\n            this.$element.append($option);\n          }\n        }\n      }\n\n      Tags.prototype.query = function (decorated, params, callback) {\n        var self = this;\n\n        this._removeOldTags();\n\n        if (params.term == null || params.page != null) {\n          decorated.call(this, params, callback);\n          return;\n        }\n\n        function wrapper(obj, child) {\n          var data = obj.results;\n\n          for (var i = 0; i < data.length; i++) {\n            var option = data[i];\n            var checkChildren = option.children != null && !wrapper({\n              results: option.children\n            }, true);\n            var optionText = (option.text || '').toUpperCase();\n            var paramsTerm = (params.term || '').toUpperCase();\n            var checkText = optionText === paramsTerm;\n\n            if (checkText || checkChildren) {\n              if (child) {\n                return false;\n              }\n\n              obj.data = data;\n              callback(obj);\n              return;\n            }\n          }\n\n          if (child) {\n            return true;\n          }\n\n          var tag = self.createTag(params);\n\n          if (tag != null) {\n            var $option = self.option(tag);\n            $option.attr('data-select2-tag', true);\n            self.addOptions([$option]);\n            self.insertTag(data, tag);\n          }\n\n          obj.results = data;\n          callback(obj);\n        }\n\n        decorated.call(this, params, wrapper);\n      };\n\n      Tags.prototype.createTag = function (decorated, params) {\n        var term = $.trim(params.term);\n\n        if (term === '') {\n          return null;\n        }\n\n        return {\n          id: term,\n          text: term\n        };\n      };\n\n      Tags.prototype.insertTag = function (_, data, tag) {\n        data.unshift(tag);\n      };\n\n      Tags.prototype._removeOldTags = function (_) {\n        var $options = this.$element.find('option[data-select2-tag]');\n        $options.each(function () {\n          if (this.selected) {\n            return;\n          }\n\n          $(this).remove();\n        });\n      };\n\n      return Tags;\n    });\n    S2.define('select2/data/tokenizer', ['jquery'], function ($) {\n      function Tokenizer(decorated, $element, options) {\n        var tokenizer = options.get('tokenizer');\n\n        if (tokenizer !== undefined) {\n          this.tokenizer = tokenizer;\n        }\n\n        decorated.call(this, $element, options);\n      }\n\n      Tokenizer.prototype.bind = function (decorated, container, $container) {\n        decorated.call(this, container, $container);\n        this.$search = container.dropdown.$search || container.selection.$search || $container.find('.select2-search__field');\n      };\n\n      Tokenizer.prototype.query = function (decorated, params, callback) {\n        var self = this;\n\n        function createAndSelect(data) {\n          // Normalize the data object so we can use it for checks\n          var item = self._normalizeItem(data); // Check if the data object already exists as a tag\n          // Select it if it doesn't\n\n\n          var $existingOptions = self.$element.find('option').filter(function () {\n            return $(this).val() === item.id;\n          }); // If an existing option wasn't found for it, create the option\n\n          if (!$existingOptions.length) {\n            var $option = self.option(item);\n            $option.attr('data-select2-tag', true);\n\n            self._removeOldTags();\n\n            self.addOptions([$option]);\n          } // Select the item, now that we know there is an option for it\n\n\n          select(item);\n        }\n\n        function select(data) {\n          self.trigger('select', {\n            data: data\n          });\n        }\n\n        params.term = params.term || '';\n        var tokenData = this.tokenizer(params, this.options, createAndSelect);\n\n        if (tokenData.term !== params.term) {\n          // Replace the search term if we have the search box\n          if (this.$search.length) {\n            this.$search.val(tokenData.term);\n            this.$search.trigger('focus');\n          }\n\n          params.term = tokenData.term;\n        }\n\n        decorated.call(this, params, callback);\n      };\n\n      Tokenizer.prototype.tokenizer = function (_, params, options, callback) {\n        var separators = options.get('tokenSeparators') || [];\n        var term = params.term;\n        var i = 0;\n\n        var createTag = this.createTag || function (params) {\n          return {\n            id: params.term,\n            text: params.term\n          };\n        };\n\n        while (i < term.length) {\n          var termChar = term[i];\n\n          if ($.inArray(termChar, separators) === -1) {\n            i++;\n            continue;\n          }\n\n          var part = term.substr(0, i);\n          var partParams = $.extend({}, params, {\n            term: part\n          });\n          var data = createTag(partParams);\n\n          if (data == null) {\n            i++;\n            continue;\n          }\n\n          callback(data); // Reset the term to not include the tokenized portion\n\n          term = term.substr(i + 1) || '';\n          i = 0;\n        }\n\n        return {\n          term: term\n        };\n      };\n\n      return Tokenizer;\n    });\n    S2.define('select2/data/minimumInputLength', [], function () {\n      function MinimumInputLength(decorated, $e, options) {\n        this.minimumInputLength = options.get('minimumInputLength');\n        decorated.call(this, $e, options);\n      }\n\n      MinimumInputLength.prototype.query = function (decorated, params, callback) {\n        params.term = params.term || '';\n\n        if (params.term.length < this.minimumInputLength) {\n          this.trigger('results:message', {\n            message: 'inputTooShort',\n            args: {\n              minimum: this.minimumInputLength,\n              input: params.term,\n              params: params\n            }\n          });\n          return;\n        }\n\n        decorated.call(this, params, callback);\n      };\n\n      return MinimumInputLength;\n    });\n    S2.define('select2/data/maximumInputLength', [], function () {\n      function MaximumInputLength(decorated, $e, options) {\n        this.maximumInputLength = options.get('maximumInputLength');\n        decorated.call(this, $e, options);\n      }\n\n      MaximumInputLength.prototype.query = function (decorated, params, callback) {\n        params.term = params.term || '';\n\n        if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {\n          this.trigger('results:message', {\n            message: 'inputTooLong',\n            args: {\n              maximum: this.maximumInputLength,\n              input: params.term,\n              params: params\n            }\n          });\n          return;\n        }\n\n        decorated.call(this, params, callback);\n      };\n\n      return MaximumInputLength;\n    });\n    S2.define('select2/data/maximumSelectionLength', [], function () {\n      function MaximumSelectionLength(decorated, $e, options) {\n        this.maximumSelectionLength = options.get('maximumSelectionLength');\n        decorated.call(this, $e, options);\n      }\n\n      MaximumSelectionLength.prototype.bind = function (decorated, container, $container) {\n        var self = this;\n        decorated.call(this, container, $container);\n        container.on('select', function () {\n          self._checkIfMaximumSelected();\n        });\n      };\n\n      MaximumSelectionLength.prototype.query = function (decorated, params, callback) {\n        var self = this;\n\n        this._checkIfMaximumSelected(function () {\n          decorated.call(self, params, callback);\n        });\n      };\n\n      MaximumSelectionLength.prototype._checkIfMaximumSelected = function (_, successCallback) {\n        var self = this;\n        this.current(function (currentData) {\n          var count = currentData != null ? currentData.length : 0;\n\n          if (self.maximumSelectionLength > 0 && count >= self.maximumSelectionLength) {\n            self.trigger('results:message', {\n              message: 'maximumSelected',\n              args: {\n                maximum: self.maximumSelectionLength\n              }\n            });\n            return;\n          }\n\n          if (successCallback) {\n            successCallback();\n          }\n        });\n      };\n\n      return MaximumSelectionLength;\n    });\n    S2.define('select2/dropdown', ['jquery', './utils'], function ($, Utils) {\n      function Dropdown($element, options) {\n        this.$element = $element;\n        this.options = options;\n\n        Dropdown.__super__.constructor.call(this);\n      }\n\n      Utils.Extend(Dropdown, Utils.Observable);\n\n      Dropdown.prototype.render = function () {\n        var $dropdown = $('<span class=\"select2-dropdown\">' + '<span class=\"select2-results\"></span>' + '</span>');\n        $dropdown.attr('dir', this.options.get('dir'));\n        this.$dropdown = $dropdown;\n        return $dropdown;\n      };\n\n      Dropdown.prototype.bind = function () {// Should be implemented in subclasses\n      };\n\n      Dropdown.prototype.position = function ($dropdown, $container) {// Should be implemented in subclasses\n      };\n\n      Dropdown.prototype.destroy = function () {\n        // Remove the dropdown from the DOM\n        this.$dropdown.remove();\n      };\n\n      return Dropdown;\n    });\n    S2.define('select2/dropdown/search', ['jquery', '../utils'], function ($, Utils) {\n      function Search() {}\n\n      Search.prototype.render = function (decorated) {\n        var $rendered = decorated.call(this);\n        var $search = $('<span class=\"select2-search select2-search--dropdown\">' + '<input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\"' + ' autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\"' + ' spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" />' + '</span>');\n        this.$searchContainer = $search;\n        this.$search = $search.find('input');\n        $rendered.prepend($search);\n        return $rendered;\n      };\n\n      Search.prototype.bind = function (decorated, container, $container) {\n        var self = this;\n        var resultsId = container.id + '-results';\n        decorated.call(this, container, $container);\n        this.$search.on('keydown', function (evt) {\n          self.trigger('keypress', evt);\n          self._keyUpPrevented = evt.isDefaultPrevented();\n        }); // Workaround for browsers which do not support the `input` event\n        // This will prevent double-triggering of events for browsers which support\n        // both the `keyup` and `input` events.\n\n        this.$search.on('input', function (evt) {\n          // Unbind the duplicated `keyup` event\n          $(this).off('keyup');\n        });\n        this.$search.on('keyup input', function (evt) {\n          self.handleSearch(evt);\n        });\n        container.on('open', function () {\n          self.$search.attr('tabindex', 0);\n          self.$search.attr('aria-controls', resultsId);\n          self.$search.trigger('focus');\n          window.setTimeout(function () {\n            self.$search.trigger('focus');\n          }, 0);\n        });\n        container.on('close', function () {\n          self.$search.attr('tabindex', -1);\n          self.$search.removeAttr('aria-controls');\n          self.$search.removeAttr('aria-activedescendant');\n          self.$search.val('');\n          self.$search.trigger('blur');\n        });\n        container.on('focus', function () {\n          if (!container.isOpen()) {\n            self.$search.trigger('focus');\n          }\n        });\n        container.on('results:all', function (params) {\n          if (params.query.term == null || params.query.term === '') {\n            var showSearch = self.showSearch(params);\n\n            if (showSearch) {\n              self.$searchContainer.removeClass('select2-search--hide');\n            } else {\n              self.$searchContainer.addClass('select2-search--hide');\n            }\n          }\n        });\n        container.on('results:focus', function (params) {\n          if (params.data._resultId) {\n            self.$search.attr('aria-activedescendant', params.data._resultId);\n          } else {\n            self.$search.removeAttr('aria-activedescendant');\n          }\n        });\n      };\n\n      Search.prototype.handleSearch = function (evt) {\n        if (!this._keyUpPrevented) {\n          var input = this.$search.val();\n          this.trigger('query', {\n            term: input\n          });\n        }\n\n        this._keyUpPrevented = false;\n      };\n\n      Search.prototype.showSearch = function (_, params) {\n        return true;\n      };\n\n      return Search;\n    });\n    S2.define('select2/dropdown/hidePlaceholder', [], function () {\n      function HidePlaceholder(decorated, $element, options, dataAdapter) {\n        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));\n        decorated.call(this, $element, options, dataAdapter);\n      }\n\n      HidePlaceholder.prototype.append = function (decorated, data) {\n        data.results = this.removePlaceholder(data.results);\n        decorated.call(this, data);\n      };\n\n      HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {\n        if (typeof placeholder === 'string') {\n          placeholder = {\n            id: '',\n            text: placeholder\n          };\n        }\n\n        return placeholder;\n      };\n\n      HidePlaceholder.prototype.removePlaceholder = function (_, data) {\n        var modifiedData = data.slice(0);\n\n        for (var d = data.length - 1; d >= 0; d--) {\n          var item = data[d];\n\n          if (this.placeholder.id === item.id) {\n            modifiedData.splice(d, 1);\n          }\n        }\n\n        return modifiedData;\n      };\n\n      return HidePlaceholder;\n    });\n    S2.define('select2/dropdown/infiniteScroll', ['jquery'], function ($) {\n      function InfiniteScroll(decorated, $element, options, dataAdapter) {\n        this.lastParams = {};\n        decorated.call(this, $element, options, dataAdapter);\n        this.$loadingMore = this.createLoadingMore();\n        this.loading = false;\n      }\n\n      InfiniteScroll.prototype.append = function (decorated, data) {\n        this.$loadingMore.remove();\n        this.loading = false;\n        decorated.call(this, data);\n\n        if (this.showLoadingMore(data)) {\n          this.$results.append(this.$loadingMore);\n          this.loadMoreIfNeeded();\n        }\n      };\n\n      InfiniteScroll.prototype.bind = function (decorated, container, $container) {\n        var self = this;\n        decorated.call(this, container, $container);\n        container.on('query', function (params) {\n          self.lastParams = params;\n          self.loading = true;\n        });\n        container.on('query:append', function (params) {\n          self.lastParams = params;\n          self.loading = true;\n        });\n        this.$results.on('scroll', this.loadMoreIfNeeded.bind(this));\n      };\n\n      InfiniteScroll.prototype.loadMoreIfNeeded = function () {\n        var isLoadMoreVisible = $.contains(document.documentElement, this.$loadingMore[0]);\n\n        if (this.loading || !isLoadMoreVisible) {\n          return;\n        }\n\n        var currentOffset = this.$results.offset().top + this.$results.outerHeight(false);\n        var loadingMoreOffset = this.$loadingMore.offset().top + this.$loadingMore.outerHeight(false);\n\n        if (currentOffset + 50 >= loadingMoreOffset) {\n          this.loadMore();\n        }\n      };\n\n      InfiniteScroll.prototype.loadMore = function () {\n        this.loading = true;\n        var params = $.extend({}, {\n          page: 1\n        }, this.lastParams);\n        params.page++;\n        this.trigger('query:append', params);\n      };\n\n      InfiniteScroll.prototype.showLoadingMore = function (_, data) {\n        return data.pagination && data.pagination.more;\n      };\n\n      InfiniteScroll.prototype.createLoadingMore = function () {\n        var $option = $('<li ' + 'class=\"select2-results__option select2-results__option--load-more\"' + 'role=\"option\" aria-disabled=\"true\"></li>');\n        var message = this.options.get('translations').get('loadingMore');\n        $option.html(message(this.lastParams));\n        return $option;\n      };\n\n      return InfiniteScroll;\n    });\n    S2.define('select2/dropdown/attachBody', ['jquery', '../utils'], function ($, Utils) {\n      function AttachBody(decorated, $element, options) {\n        this.$dropdownParent = $(options.get('dropdownParent') || document.body);\n        decorated.call(this, $element, options);\n      }\n\n      AttachBody.prototype.bind = function (decorated, container, $container) {\n        var self = this;\n        decorated.call(this, container, $container);\n        container.on('open', function () {\n          self._showDropdown();\n\n          self._attachPositioningHandler(container); // Must bind after the results handlers to ensure correct sizing\n\n\n          self._bindContainerResultHandlers(container);\n        });\n        container.on('close', function () {\n          self._hideDropdown();\n\n          self._detachPositioningHandler(container);\n        });\n        this.$dropdownContainer.on('mousedown', function (evt) {\n          evt.stopPropagation();\n        });\n      };\n\n      AttachBody.prototype.destroy = function (decorated) {\n        decorated.call(this);\n        this.$dropdownContainer.remove();\n      };\n\n      AttachBody.prototype.position = function (decorated, $dropdown, $container) {\n        // Clone all of the container classes\n        $dropdown.attr('class', $container.attr('class'));\n        $dropdown.removeClass('select2');\n        $dropdown.addClass('select2-container--open');\n        $dropdown.css({\n          position: 'absolute',\n          top: -999999\n        });\n        this.$container = $container;\n      };\n\n      AttachBody.prototype.render = function (decorated) {\n        var $container = $('<span></span>');\n        var $dropdown = decorated.call(this);\n        $container.append($dropdown);\n        this.$dropdownContainer = $container;\n        return $container;\n      };\n\n      AttachBody.prototype._hideDropdown = function (decorated) {\n        this.$dropdownContainer.detach();\n      };\n\n      AttachBody.prototype._bindContainerResultHandlers = function (decorated, container) {\n        // These should only be bound once\n        if (this._containerResultsHandlersBound) {\n          return;\n        }\n\n        var self = this;\n        container.on('results:all', function () {\n          self._positionDropdown();\n\n          self._resizeDropdown();\n        });\n        container.on('results:append', function () {\n          self._positionDropdown();\n\n          self._resizeDropdown();\n        });\n        container.on('results:message', function () {\n          self._positionDropdown();\n\n          self._resizeDropdown();\n        });\n        container.on('select', function () {\n          self._positionDropdown();\n\n          self._resizeDropdown();\n        });\n        container.on('unselect', function () {\n          self._positionDropdown();\n\n          self._resizeDropdown();\n        });\n        this._containerResultsHandlersBound = true;\n      };\n\n      AttachBody.prototype._attachPositioningHandler = function (decorated, container) {\n        var self = this;\n        var scrollEvent = 'scroll.select2.' + container.id;\n        var resizeEvent = 'resize.select2.' + container.id;\n        var orientationEvent = 'orientationchange.select2.' + container.id;\n        var $watchers = this.$container.parents().filter(Utils.hasScroll);\n        $watchers.each(function () {\n          Utils.StoreData(this, 'select2-scroll-position', {\n            x: $(this).scrollLeft(),\n            y: $(this).scrollTop()\n          });\n        });\n        $watchers.on(scrollEvent, function (ev) {\n          var position = Utils.GetData(this, 'select2-scroll-position');\n          $(this).scrollTop(position.y);\n        });\n        $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent, function (e) {\n          self._positionDropdown();\n\n          self._resizeDropdown();\n        });\n      };\n\n      AttachBody.prototype._detachPositioningHandler = function (decorated, container) {\n        var scrollEvent = 'scroll.select2.' + container.id;\n        var resizeEvent = 'resize.select2.' + container.id;\n        var orientationEvent = 'orientationchange.select2.' + container.id;\n        var $watchers = this.$container.parents().filter(Utils.hasScroll);\n        $watchers.off(scrollEvent);\n        $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);\n      };\n\n      AttachBody.prototype._positionDropdown = function () {\n        var $window = $(window);\n        var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');\n        var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');\n        var newDirection = null;\n        var offset = this.$container.offset();\n        offset.bottom = offset.top + this.$container.outerHeight(false);\n        var container = {\n          height: this.$container.outerHeight(false)\n        };\n        container.top = offset.top;\n        container.bottom = offset.top + container.height;\n        var dropdown = {\n          height: this.$dropdown.outerHeight(false)\n        };\n        var viewport = {\n          top: $window.scrollTop(),\n          bottom: $window.scrollTop() + $window.height()\n        };\n        var enoughRoomAbove = viewport.top < offset.top - dropdown.height;\n        var enoughRoomBelow = viewport.bottom > offset.bottom + dropdown.height;\n        var css = {\n          left: offset.left,\n          top: container.bottom\n        }; // Determine what the parent element is to use for calculating the offset\n\n        var $offsetParent = this.$dropdownParent; // For statically positioned elements, we need to get the element\n        // that is determining the offset\n\n        if ($offsetParent.css('position') === 'static') {\n          $offsetParent = $offsetParent.offsetParent();\n        }\n\n        var parentOffset = {\n          top: 0,\n          left: 0\n        };\n\n        if ($.contains(document.body, $offsetParent[0]) || $offsetParent[0].isConnected) {\n          parentOffset = $offsetParent.offset();\n        }\n\n        css.top -= parentOffset.top;\n        css.left -= parentOffset.left;\n\n        if (!isCurrentlyAbove && !isCurrentlyBelow) {\n          newDirection = 'below';\n        }\n\n        if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {\n          newDirection = 'above';\n        } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {\n          newDirection = 'below';\n        }\n\n        if (newDirection == 'above' || isCurrentlyAbove && newDirection !== 'below') {\n          css.top = container.top - parentOffset.top - dropdown.height;\n        }\n\n        if (newDirection != null) {\n          this.$dropdown.removeClass('select2-dropdown--below select2-dropdown--above').addClass('select2-dropdown--' + newDirection);\n          this.$container.removeClass('select2-container--below select2-container--above').addClass('select2-container--' + newDirection);\n        }\n\n        this.$dropdownContainer.css(css);\n      };\n\n      AttachBody.prototype._resizeDropdown = function () {\n        var css = {\n          width: this.$container.outerWidth(false) + 'px'\n        };\n\n        if (this.options.get('dropdownAutoWidth')) {\n          css.minWidth = css.width;\n          css.position = 'relative';\n          css.width = 'auto';\n        }\n\n        this.$dropdown.css(css);\n      };\n\n      AttachBody.prototype._showDropdown = function (decorated) {\n        this.$dropdownContainer.appendTo(this.$dropdownParent);\n\n        this._positionDropdown();\n\n        this._resizeDropdown();\n      };\n\n      return AttachBody;\n    });\n    S2.define('select2/dropdown/minimumResultsForSearch', [], function () {\n      function countResults(data) {\n        var count = 0;\n\n        for (var d = 0; d < data.length; d++) {\n          var item = data[d];\n\n          if (item.children) {\n            count += countResults(item.children);\n          } else {\n            count++;\n          }\n        }\n\n        return count;\n      }\n\n      function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {\n        this.minimumResultsForSearch = options.get('minimumResultsForSearch');\n\n        if (this.minimumResultsForSearch < 0) {\n          this.minimumResultsForSearch = Infinity;\n        }\n\n        decorated.call(this, $element, options, dataAdapter);\n      }\n\n      MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {\n        if (countResults(params.data.results) < this.minimumResultsForSearch) {\n          return false;\n        }\n\n        return decorated.call(this, params);\n      };\n\n      return MinimumResultsForSearch;\n    });\n    S2.define('select2/dropdown/selectOnClose', ['../utils'], function (Utils) {\n      function SelectOnClose() {}\n\n      SelectOnClose.prototype.bind = function (decorated, container, $container) {\n        var self = this;\n        decorated.call(this, container, $container);\n        container.on('close', function (params) {\n          self._handleSelectOnClose(params);\n        });\n      };\n\n      SelectOnClose.prototype._handleSelectOnClose = function (_, params) {\n        if (params && params.originalSelect2Event != null) {\n          var event = params.originalSelect2Event; // Don't select an item if the close event was triggered from a select or\n          // unselect event\n\n          if (event._type === 'select' || event._type === 'unselect') {\n            return;\n          }\n        }\n\n        var $highlightedResults = this.getHighlightedResults(); // Only select highlighted results\n\n        if ($highlightedResults.length < 1) {\n          return;\n        }\n\n        var data = Utils.GetData($highlightedResults[0], 'data'); // Don't re-select already selected resulte\n\n        if (data.element != null && data.element.selected || data.element == null && data.selected) {\n          return;\n        }\n\n        this.trigger('select', {\n          data: data\n        });\n      };\n\n      return SelectOnClose;\n    });\n    S2.define('select2/dropdown/closeOnSelect', [], function () {\n      function CloseOnSelect() {}\n\n      CloseOnSelect.prototype.bind = function (decorated, container, $container) {\n        var self = this;\n        decorated.call(this, container, $container);\n        container.on('select', function (evt) {\n          self._selectTriggered(evt);\n        });\n        container.on('unselect', function (evt) {\n          self._selectTriggered(evt);\n        });\n      };\n\n      CloseOnSelect.prototype._selectTriggered = function (_, evt) {\n        var originalEvent = evt.originalEvent; // Don't close if the control key is being held\n\n        if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) {\n          return;\n        }\n\n        this.trigger('close', {\n          originalEvent: originalEvent,\n          originalSelect2Event: evt\n        });\n      };\n\n      return CloseOnSelect;\n    });\n    S2.define('select2/i18n/en', [], function () {\n      // English\n      return {\n        errorLoading: function errorLoading() {\n          return 'The results could not be loaded.';\n        },\n        inputTooLong: function inputTooLong(args) {\n          var overChars = args.input.length - args.maximum;\n          var message = 'Please delete ' + overChars + ' character';\n\n          if (overChars != 1) {\n            message += 's';\n          }\n\n          return message;\n        },\n        inputTooShort: function inputTooShort(args) {\n          var remainingChars = args.minimum - args.input.length;\n          var message = 'Please enter ' + remainingChars + ' or more characters';\n          return message;\n        },\n        loadingMore: function loadingMore() {\n          return 'Loading more results…';\n        },\n        maximumSelected: function maximumSelected(args) {\n          var message = 'You can only select ' + args.maximum + ' item';\n\n          if (args.maximum != 1) {\n            message += 's';\n          }\n\n          return message;\n        },\n        noResults: function noResults() {\n          return 'No results found';\n        },\n        searching: function searching() {\n          return 'Searching…';\n        },\n        removeAllItems: function removeAllItems() {\n          return 'Remove all items';\n        }\n      };\n    });\n    S2.define('select2/defaults', ['jquery', 'require', './results', './selection/single', './selection/multiple', './selection/placeholder', './selection/allowClear', './selection/search', './selection/eventRelay', './utils', './translation', './diacritics', './data/select', './data/array', './data/ajax', './data/tags', './data/tokenizer', './data/minimumInputLength', './data/maximumInputLength', './data/maximumSelectionLength', './dropdown', './dropdown/search', './dropdown/hidePlaceholder', './dropdown/infiniteScroll', './dropdown/attachBody', './dropdown/minimumResultsForSearch', './dropdown/selectOnClose', './dropdown/closeOnSelect', './i18n/en'], function ($, require, ResultsList, SingleSelection, MultipleSelection, Placeholder, AllowClear, SelectionSearch, EventRelay, Utils, Translation, DIACRITICS, SelectData, ArrayData, AjaxData, Tags, Tokenizer, MinimumInputLength, MaximumInputLength, MaximumSelectionLength, Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll, AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect, EnglishTranslation) {\n      function Defaults() {\n        this.reset();\n      }\n\n      Defaults.prototype.apply = function (options) {\n        options = $.extend(true, {}, this.defaults, options);\n\n        if (options.dataAdapter == null) {\n          if (options.ajax != null) {\n            options.dataAdapter = AjaxData;\n          } else if (options.data != null) {\n            options.dataAdapter = ArrayData;\n          } else {\n            options.dataAdapter = SelectData;\n          }\n\n          if (options.minimumInputLength > 0) {\n            options.dataAdapter = Utils.Decorate(options.dataAdapter, MinimumInputLength);\n          }\n\n          if (options.maximumInputLength > 0) {\n            options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumInputLength);\n          }\n\n          if (options.maximumSelectionLength > 0) {\n            options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumSelectionLength);\n          }\n\n          if (options.tags) {\n            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);\n          }\n\n          if (options.tokenSeparators != null || options.tokenizer != null) {\n            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tokenizer);\n          }\n\n          if (options.query != null) {\n            var Query = require(options.amdBase + 'compat/query');\n\n            options.dataAdapter = Utils.Decorate(options.dataAdapter, Query);\n          }\n\n          if (options.initSelection != null) {\n            var InitSelection = require(options.amdBase + 'compat/initSelection');\n\n            options.dataAdapter = Utils.Decorate(options.dataAdapter, InitSelection);\n          }\n        }\n\n        if (options.resultsAdapter == null) {\n          options.resultsAdapter = ResultsList;\n\n          if (options.ajax != null) {\n            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, InfiniteScroll);\n          }\n\n          if (options.placeholder != null) {\n            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, HidePlaceholder);\n          }\n\n          if (options.selectOnClose) {\n            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, SelectOnClose);\n          }\n        }\n\n        if (options.dropdownAdapter == null) {\n          if (options.multiple) {\n            options.dropdownAdapter = Dropdown;\n          } else {\n            var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);\n            options.dropdownAdapter = SearchableDropdown;\n          }\n\n          if (options.minimumResultsForSearch !== 0) {\n            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, MinimumResultsForSearch);\n          }\n\n          if (options.closeOnSelect) {\n            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, CloseOnSelect);\n          }\n\n          if (options.dropdownCssClass != null || options.dropdownCss != null || options.adaptDropdownCssClass != null) {\n            var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');\n\n            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, DropdownCSS);\n          }\n\n          options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, AttachBody);\n        }\n\n        if (options.selectionAdapter == null) {\n          if (options.multiple) {\n            options.selectionAdapter = MultipleSelection;\n          } else {\n            options.selectionAdapter = SingleSelection;\n          } // Add the placeholder mixin if a placeholder was specified\n\n\n          if (options.placeholder != null) {\n            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, Placeholder);\n          }\n\n          if (options.allowClear) {\n            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, AllowClear);\n          }\n\n          if (options.multiple) {\n            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionSearch);\n          }\n\n          if (options.containerCssClass != null || options.containerCss != null || options.adaptContainerCssClass != null) {\n            var ContainerCSS = require(options.amdBase + 'compat/containerCss');\n\n            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, ContainerCSS);\n          }\n\n          options.selectionAdapter = Utils.Decorate(options.selectionAdapter, EventRelay);\n        } // If the defaults were not previously applied from an element, it is\n        // possible for the language option to have not been resolved\n\n\n        options.language = this._resolveLanguage(options.language); // Always fall back to English since it will always be complete\n\n        options.language.push('en');\n        var uniqueLanguages = [];\n\n        for (var l = 0; l < options.language.length; l++) {\n          var language = options.language[l];\n\n          if (uniqueLanguages.indexOf(language) === -1) {\n            uniqueLanguages.push(language);\n          }\n        }\n\n        options.language = uniqueLanguages;\n        options.translations = this._processTranslations(options.language, options.debug);\n        return options;\n      };\n\n      Defaults.prototype.reset = function () {\n        function stripDiacritics(text) {\n          // Used 'uni range + named function' from http://jsperf.com/diacritics/18\n          function match(a) {\n            return DIACRITICS[a] || a;\n          }\n\n          return text.replace(/[^\\u0000-\\u007E]/g, match);\n        }\n\n        function matcher(params, data) {\n          // Always return the object if there is nothing to compare\n          if ($.trim(params.term) === '') {\n            return data;\n          } // Do a recursive check for options with children\n\n\n          if (data.children && data.children.length > 0) {\n            // Clone the data object if there are children\n            // This is required as we modify the object to remove any non-matches\n            var match = $.extend(true, {}, data); // Check each child of the option\n\n            for (var c = data.children.length - 1; c >= 0; c--) {\n              var child = data.children[c];\n              var matches = matcher(params, child); // If there wasn't a match, remove the object in the array\n\n              if (matches == null) {\n                match.children.splice(c, 1);\n              }\n            } // If any children matched, return the new object\n\n\n            if (match.children.length > 0) {\n              return match;\n            } // If there were no matching children, check just the plain object\n\n\n            return matcher(params, match);\n          }\n\n          var original = stripDiacritics(data.text).toUpperCase();\n          var term = stripDiacritics(params.term).toUpperCase(); // Check if the text contains the term\n\n          if (original.indexOf(term) > -1) {\n            return data;\n          } // If it doesn't contain the term, don't return anything\n\n\n          return null;\n        }\n\n        this.defaults = {\n          amdBase: './',\n          amdLanguageBase: './i18n/',\n          closeOnSelect: true,\n          debug: false,\n          dropdownAutoWidth: false,\n          escapeMarkup: Utils.escapeMarkup,\n          language: {},\n          matcher: matcher,\n          minimumInputLength: 0,\n          maximumInputLength: 0,\n          maximumSelectionLength: 0,\n          minimumResultsForSearch: 0,\n          selectOnClose: false,\n          scrollAfterSelect: false,\n          sorter: function sorter(data) {\n            return data;\n          },\n          templateResult: function templateResult(result) {\n            return result.text;\n          },\n          templateSelection: function templateSelection(selection) {\n            return selection.text;\n          },\n          theme: 'default',\n          width: 'resolve'\n        };\n      };\n\n      Defaults.prototype.applyFromElement = function (options, $element) {\n        var optionLanguage = options.language;\n        var defaultLanguage = this.defaults.language;\n        var elementLanguage = $element.prop('lang');\n        var parentLanguage = $element.closest('[lang]').prop('lang');\n        var languages = Array.prototype.concat.call(this._resolveLanguage(elementLanguage), this._resolveLanguage(optionLanguage), this._resolveLanguage(defaultLanguage), this._resolveLanguage(parentLanguage));\n        options.language = languages;\n        return options;\n      };\n\n      Defaults.prototype._resolveLanguage = function (language) {\n        if (!language) {\n          return [];\n        }\n\n        if ($.isEmptyObject(language)) {\n          return [];\n        }\n\n        if ($.isPlainObject(language)) {\n          return [language];\n        }\n\n        var languages;\n\n        if (!$.isArray(language)) {\n          languages = [language];\n        } else {\n          languages = language;\n        }\n\n        var resolvedLanguages = [];\n\n        for (var l = 0; l < languages.length; l++) {\n          resolvedLanguages.push(languages[l]);\n\n          if (typeof languages[l] === 'string' && languages[l].indexOf('-') > 0) {\n            // Extract the region information if it is included\n            var languageParts = languages[l].split('-');\n            var baseLanguage = languageParts[0];\n            resolvedLanguages.push(baseLanguage);\n          }\n        }\n\n        return resolvedLanguages;\n      };\n\n      Defaults.prototype._processTranslations = function (languages, debug) {\n        var translations = new Translation();\n\n        for (var l = 0; l < languages.length; l++) {\n          var languageData = new Translation();\n          var language = languages[l];\n\n          if (typeof language === 'string') {\n            try {\n              // Try to load it with the original name\n              languageData = Translation.loadPath(language);\n            } catch (e) {\n              try {\n                // If we couldn't load it, check if it wasn't the full path\n                language = this.defaults.amdLanguageBase + language;\n                languageData = Translation.loadPath(language);\n              } catch (ex) {\n                // The translation could not be loaded at all. Sometimes this is\n                // because of a configuration problem, other times this can be\n                // because of how Select2 helps load all possible translation files\n                if (debug && window.console && console.warn) {\n                  console.warn('Select2: The language file for \"' + language + '\" could ' + 'not be automatically loaded. A fallback will be used instead.');\n                }\n              }\n            }\n          } else if ($.isPlainObject(language)) {\n            languageData = new Translation(language);\n          } else {\n            languageData = language;\n          }\n\n          translations.extend(languageData);\n        }\n\n        return translations;\n      };\n\n      Defaults.prototype.set = function (key, value) {\n        var camelKey = $.camelCase(key);\n        var data = {};\n        data[camelKey] = value;\n\n        var convertedData = Utils._convertData(data);\n\n        $.extend(true, this.defaults, convertedData);\n      };\n\n      var defaults = new Defaults();\n      return defaults;\n    });\n    S2.define('select2/options', ['require', 'jquery', './defaults', './utils'], function (require, $, Defaults, Utils) {\n      function Options(options, $element) {\n        this.options = options;\n\n        if ($element != null) {\n          this.fromElement($element);\n        }\n\n        if ($element != null) {\n          this.options = Defaults.applyFromElement(this.options, $element);\n        }\n\n        this.options = Defaults.apply(this.options);\n\n        if ($element && $element.is('input')) {\n          var InputCompat = require(this.get('amdBase') + 'compat/inputData');\n\n          this.options.dataAdapter = Utils.Decorate(this.options.dataAdapter, InputCompat);\n        }\n      }\n\n      Options.prototype.fromElement = function ($e) {\n        var excludedData = ['select2'];\n\n        if (this.options.multiple == null) {\n          this.options.multiple = $e.prop('multiple');\n        }\n\n        if (this.options.disabled == null) {\n          this.options.disabled = $e.prop('disabled');\n        }\n\n        if (this.options.dir == null) {\n          if ($e.prop('dir')) {\n            this.options.dir = $e.prop('dir');\n          } else if ($e.closest('[dir]').prop('dir')) {\n            this.options.dir = $e.closest('[dir]').prop('dir');\n          } else {\n            this.options.dir = 'ltr';\n          }\n        }\n\n        $e.prop('disabled', this.options.disabled);\n        $e.prop('multiple', this.options.multiple);\n\n        if (Utils.GetData($e[0], 'select2Tags')) {\n          if (this.options.debug && window.console && console.warn) {\n            console.warn('Select2: The `data-select2-tags` attribute has been changed to ' + 'use the `data-data` and `data-tags=\"true\"` attributes and will be ' + 'removed in future versions of Select2.');\n          }\n\n          Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));\n          Utils.StoreData($e[0], 'tags', true);\n        }\n\n        if (Utils.GetData($e[0], 'ajaxUrl')) {\n          if (this.options.debug && window.console && console.warn) {\n            console.warn('Select2: The `data-ajax-url` attribute has been changed to ' + '`data-ajax--url` and support for the old attribute will be removed' + ' in future versions of Select2.');\n          }\n\n          $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));\n          Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));\n        }\n\n        var dataset = {};\n\n        function upperCaseLetter(_, letter) {\n          return letter.toUpperCase();\n        } // Pre-load all of the attributes which are prefixed with `data-`\n\n\n        for (var attr = 0; attr < $e[0].attributes.length; attr++) {\n          var attributeName = $e[0].attributes[attr].name;\n          var prefix = 'data-';\n\n          if (attributeName.substr(0, prefix.length) == prefix) {\n            // Get the contents of the attribute after `data-`\n            var dataName = attributeName.substring(prefix.length); // Get the data contents from the consistent source\n            // This is more than likely the jQuery data helper\n\n            var dataValue = Utils.GetData($e[0], dataName); // camelCase the attribute name to match the spec\n\n            var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter); // Store the data attribute contents into the dataset since\n\n            dataset[camelDataName] = dataValue;\n          }\n        } // Prefer the element's `dataset` attribute if it exists\n        // jQuery 1.x does not correctly handle data attributes with multiple dashes\n\n\n        if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {\n          dataset = $.extend(true, {}, $e[0].dataset, dataset);\n        } // Prefer our internal data cache if it exists\n\n\n        var data = $.extend(true, {}, Utils.GetData($e[0]), dataset);\n        data = Utils._convertData(data);\n\n        for (var key in data) {\n          if ($.inArray(key, excludedData) > -1) {\n            continue;\n          }\n\n          if ($.isPlainObject(this.options[key])) {\n            $.extend(this.options[key], data[key]);\n          } else {\n            this.options[key] = data[key];\n          }\n        }\n\n        return this;\n      };\n\n      Options.prototype.get = function (key) {\n        return this.options[key];\n      };\n\n      Options.prototype.set = function (key, val) {\n        this.options[key] = val;\n      };\n\n      return Options;\n    });\n    S2.define('select2/core', ['jquery', './options', './utils', './keys'], function ($, Options, Utils, KEYS) {\n      var Select2 = function Select2($element, options) {\n        if (Utils.GetData($element[0], 'select2') != null) {\n          Utils.GetData($element[0], 'select2').destroy();\n        }\n\n        this.$element = $element;\n        this.id = this._generateId($element);\n        options = options || {};\n        this.options = new Options(options, $element);\n\n        Select2.__super__.constructor.call(this); // Set up the tabindex\n\n\n        var tabindex = $element.attr('tabindex') || 0;\n        Utils.StoreData($element[0], 'old-tabindex', tabindex);\n        $element.attr('tabindex', '-1'); // Set up containers and adapters\n\n        var DataAdapter = this.options.get('dataAdapter');\n        this.dataAdapter = new DataAdapter($element, this.options);\n        var $container = this.render();\n\n        this._placeContainer($container);\n\n        var SelectionAdapter = this.options.get('selectionAdapter');\n        this.selection = new SelectionAdapter($element, this.options);\n        this.$selection = this.selection.render();\n        this.selection.position(this.$selection, $container);\n        var DropdownAdapter = this.options.get('dropdownAdapter');\n        this.dropdown = new DropdownAdapter($element, this.options);\n        this.$dropdown = this.dropdown.render();\n        this.dropdown.position(this.$dropdown, $container);\n        var ResultsAdapter = this.options.get('resultsAdapter');\n        this.results = new ResultsAdapter($element, this.options, this.dataAdapter);\n        this.$results = this.results.render();\n        this.results.position(this.$results, this.$dropdown); // Bind events\n\n        var self = this; // Bind the container to all of the adapters\n\n        this._bindAdapters(); // Register any DOM event handlers\n\n\n        this._registerDomEvents(); // Register any internal event handlers\n\n\n        this._registerDataEvents();\n\n        this._registerSelectionEvents();\n\n        this._registerDropdownEvents();\n\n        this._registerResultsEvents();\n\n        this._registerEvents(); // Set the initial state\n\n\n        this.dataAdapter.current(function (initialData) {\n          self.trigger('selection:update', {\n            data: initialData\n          });\n        }); // Hide the original select\n\n        $element.addClass('select2-hidden-accessible');\n        $element.attr('aria-hidden', 'true'); // Synchronize any monitored attributes\n\n        this._syncAttributes();\n\n        Utils.StoreData($element[0], 'select2', this); // Ensure backwards compatibility with $element.data('select2').\n\n        $element.data('select2', this);\n      };\n\n      Utils.Extend(Select2, Utils.Observable);\n\n      Select2.prototype._generateId = function ($element) {\n        var id = '';\n\n        if ($element.attr('id') != null) {\n          id = $element.attr('id');\n        } else if ($element.attr('name') != null) {\n          id = $element.attr('name') + '-' + Utils.generateChars(2);\n        } else {\n          id = Utils.generateChars(4);\n        }\n\n        id = id.replace(/(:|\\.|\\[|\\]|,)/g, '');\n        id = 'select2-' + id;\n        return id;\n      };\n\n      Select2.prototype._placeContainer = function ($container) {\n        $container.insertAfter(this.$element);\n\n        var width = this._resolveWidth(this.$element, this.options.get('width'));\n\n        if (width != null) {\n          $container.css('width', width);\n        }\n      };\n\n      Select2.prototype._resolveWidth = function ($element, method) {\n        var WIDTH = /^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;\n\n        if (method == 'resolve') {\n          var styleWidth = this._resolveWidth($element, 'style');\n\n          if (styleWidth != null) {\n            return styleWidth;\n          }\n\n          return this._resolveWidth($element, 'element');\n        }\n\n        if (method == 'element') {\n          var elementWidth = $element.outerWidth(false);\n\n          if (elementWidth <= 0) {\n            return 'auto';\n          }\n\n          return elementWidth + 'px';\n        }\n\n        if (method == 'style') {\n          var style = $element.attr('style');\n\n          if (typeof style !== 'string') {\n            return null;\n          }\n\n          var attrs = style.split(';');\n\n          for (var i = 0, l = attrs.length; i < l; i = i + 1) {\n            var attr = attrs[i].replace(/\\s/g, '');\n            var matches = attr.match(WIDTH);\n\n            if (matches !== null && matches.length >= 1) {\n              return matches[1];\n            }\n          }\n\n          return null;\n        }\n\n        if (method == 'computedstyle') {\n          var computedStyle = window.getComputedStyle($element[0]);\n          return computedStyle.width;\n        }\n\n        return method;\n      };\n\n      Select2.prototype._bindAdapters = function () {\n        this.dataAdapter.bind(this, this.$container);\n        this.selection.bind(this, this.$container);\n        this.dropdown.bind(this, this.$container);\n        this.results.bind(this, this.$container);\n      };\n\n      Select2.prototype._registerDomEvents = function () {\n        var self = this;\n        this.$element.on('change.select2', function () {\n          self.dataAdapter.current(function (data) {\n            self.trigger('selection:update', {\n              data: data\n            });\n          });\n        });\n        this.$element.on('focus.select2', function (evt) {\n          self.trigger('focus', evt);\n        });\n        this._syncA = Utils.bind(this._syncAttributes, this);\n        this._syncS = Utils.bind(this._syncSubtree, this);\n\n        if (this.$element[0].attachEvent) {\n          this.$element[0].attachEvent('onpropertychange', this._syncA);\n        }\n\n        var observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n\n        if (observer != null) {\n          this._observer = new observer(function (mutations) {\n            self._syncA();\n\n            self._syncS(null, mutations);\n          });\n\n          this._observer.observe(this.$element[0], {\n            attributes: true,\n            childList: true,\n            subtree: false\n          });\n        } else if (this.$element[0].addEventListener) {\n          this.$element[0].addEventListener('DOMAttrModified', self._syncA, false);\n          this.$element[0].addEventListener('DOMNodeInserted', self._syncS, false);\n          this.$element[0].addEventListener('DOMNodeRemoved', self._syncS, false);\n        }\n      };\n\n      Select2.prototype._registerDataEvents = function () {\n        var self = this;\n        this.dataAdapter.on('*', function (name, params) {\n          self.trigger(name, params);\n        });\n      };\n\n      Select2.prototype._registerSelectionEvents = function () {\n        var self = this;\n        var nonRelayEvents = ['toggle', 'focus'];\n        this.selection.on('toggle', function () {\n          self.toggleDropdown();\n        });\n        this.selection.on('focus', function (params) {\n          self.focus(params);\n        });\n        this.selection.on('*', function (name, params) {\n          if ($.inArray(name, nonRelayEvents) !== -1) {\n            return;\n          }\n\n          self.trigger(name, params);\n        });\n      };\n\n      Select2.prototype._registerDropdownEvents = function () {\n        var self = this;\n        this.dropdown.on('*', function (name, params) {\n          self.trigger(name, params);\n        });\n      };\n\n      Select2.prototype._registerResultsEvents = function () {\n        var self = this;\n        this.results.on('*', function (name, params) {\n          self.trigger(name, params);\n        });\n      };\n\n      Select2.prototype._registerEvents = function () {\n        var self = this;\n        this.on('open', function () {\n          self.$container.addClass('select2-container--open');\n        });\n        this.on('close', function () {\n          self.$container.removeClass('select2-container--open');\n        });\n        this.on('enable', function () {\n          self.$container.removeClass('select2-container--disabled');\n        });\n        this.on('disable', function () {\n          self.$container.addClass('select2-container--disabled');\n        });\n        this.on('blur', function () {\n          self.$container.removeClass('select2-container--focus');\n        });\n        this.on('query', function (params) {\n          if (!self.isOpen()) {\n            self.trigger('open', {});\n          }\n\n          this.dataAdapter.query(params, function (data) {\n            self.trigger('results:all', {\n              data: data,\n              query: params\n            });\n          });\n        });\n        this.on('query:append', function (params) {\n          this.dataAdapter.query(params, function (data) {\n            self.trigger('results:append', {\n              data: data,\n              query: params\n            });\n          });\n        });\n        this.on('keypress', function (evt) {\n          var key = evt.which;\n\n          if (self.isOpen()) {\n            if (key === KEYS.ESC || key === KEYS.TAB || key === KEYS.UP && evt.altKey) {\n              self.close(evt);\n              evt.preventDefault();\n            } else if (key === KEYS.ENTER) {\n              self.trigger('results:select', {});\n              evt.preventDefault();\n            } else if (key === KEYS.SPACE && evt.ctrlKey) {\n              self.trigger('results:toggle', {});\n              evt.preventDefault();\n            } else if (key === KEYS.UP) {\n              self.trigger('results:previous', {});\n              evt.preventDefault();\n            } else if (key === KEYS.DOWN) {\n              self.trigger('results:next', {});\n              evt.preventDefault();\n            }\n          } else {\n            if (key === KEYS.ENTER || key === KEYS.SPACE || key === KEYS.DOWN && evt.altKey) {\n              self.open();\n              evt.preventDefault();\n            }\n          }\n        });\n      };\n\n      Select2.prototype._syncAttributes = function () {\n        this.options.set('disabled', this.$element.prop('disabled'));\n\n        if (this.isDisabled()) {\n          if (this.isOpen()) {\n            this.close();\n          }\n\n          this.trigger('disable', {});\n        } else {\n          this.trigger('enable', {});\n        }\n      };\n\n      Select2.prototype._isChangeMutation = function (evt, mutations) {\n        var changed = false;\n        var self = this; // Ignore any mutation events raised for elements that aren't options or\n        // optgroups. This handles the case when the select element is destroyed\n\n        if (evt && evt.target && evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP') {\n          return;\n        }\n\n        if (!mutations) {\n          // If mutation events aren't supported, then we can only assume that the\n          // change affected the selections\n          changed = true;\n        } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {\n          for (var n = 0; n < mutations.addedNodes.length; n++) {\n            var node = mutations.addedNodes[n];\n\n            if (node.selected) {\n              changed = true;\n            }\n          }\n        } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {\n          changed = true;\n        } else if ($.isArray(mutations)) {\n          $.each(mutations, function (evt, mutation) {\n            if (self._isChangeMutation(evt, mutation)) {\n              // We've found a change mutation.\n              // Let's escape from the loop and continue\n              changed = true;\n              return false;\n            }\n          });\n        }\n\n        return changed;\n      };\n\n      Select2.prototype._syncSubtree = function (evt, mutations) {\n        var changed = this._isChangeMutation(evt, mutations);\n\n        var self = this; // Only re-pull the data if we think there is a change\n\n        if (changed) {\n          this.dataAdapter.current(function (currentData) {\n            self.trigger('selection:update', {\n              data: currentData\n            });\n          });\n        }\n      };\n      /**\r\n       * Override the trigger method to automatically trigger pre-events when\r\n       * there are events that can be prevented.\r\n       */\n\n\n      Select2.prototype.trigger = function (name, args) {\n        var actualTrigger = Select2.__super__.trigger;\n        var preTriggerMap = {\n          'open': 'opening',\n          'close': 'closing',\n          'select': 'selecting',\n          'unselect': 'unselecting',\n          'clear': 'clearing'\n        };\n\n        if (args === undefined) {\n          args = {};\n        }\n\n        if (name in preTriggerMap) {\n          var preTriggerName = preTriggerMap[name];\n          var preTriggerArgs = {\n            prevented: false,\n            name: name,\n            args: args\n          };\n          actualTrigger.call(this, preTriggerName, preTriggerArgs);\n\n          if (preTriggerArgs.prevented) {\n            args.prevented = true;\n            return;\n          }\n        }\n\n        actualTrigger.call(this, name, args);\n      };\n\n      Select2.prototype.toggleDropdown = function () {\n        if (this.isDisabled()) {\n          return;\n        }\n\n        if (this.isOpen()) {\n          this.close();\n        } else {\n          this.open();\n        }\n      };\n\n      Select2.prototype.open = function () {\n        if (this.isOpen()) {\n          return;\n        }\n\n        if (this.isDisabled()) {\n          return;\n        }\n\n        this.trigger('query', {});\n      };\n\n      Select2.prototype.close = function (evt) {\n        if (!this.isOpen()) {\n          return;\n        }\n\n        this.trigger('close', {\n          originalEvent: evt\n        });\n      };\n      /**\r\n       * Helper method to abstract the \"enabled\" (not \"disabled\") state of this\r\n       * object.\r\n       *\r\n       * @return {true} if the instance is not disabled.\r\n       * @return {false} if the instance is disabled.\r\n       */\n\n\n      Select2.prototype.isEnabled = function () {\n        return !this.isDisabled();\n      };\n      /**\r\n       * Helper method to abstract the \"disabled\" state of this object.\r\n       *\r\n       * @return {true} if the disabled option is true.\r\n       * @return {false} if the disabled option is false.\r\n       */\n\n\n      Select2.prototype.isDisabled = function () {\n        return this.options.get('disabled');\n      };\n\n      Select2.prototype.isOpen = function () {\n        return this.$container.hasClass('select2-container--open');\n      };\n\n      Select2.prototype.hasFocus = function () {\n        return this.$container.hasClass('select2-container--focus');\n      };\n\n      Select2.prototype.focus = function (data) {\n        // No need to re-trigger focus events if we are already focused\n        if (this.hasFocus()) {\n          return;\n        }\n\n        this.$container.addClass('select2-container--focus');\n        this.trigger('focus', {});\n      };\n\n      Select2.prototype.enable = function (args) {\n        if (this.options.get('debug') && window.console && console.warn) {\n          console.warn('Select2: The `select2(\"enable\")` method has been deprecated and will' + ' be removed in later Select2 versions. Use $element.prop(\"disabled\")' + ' instead.');\n        }\n\n        if (args == null || args.length === 0) {\n          args = [true];\n        }\n\n        var disabled = !args[0];\n        this.$element.prop('disabled', disabled);\n      };\n\n      Select2.prototype.data = function () {\n        if (this.options.get('debug') && arguments.length > 0 && window.console && console.warn) {\n          console.warn('Select2: Data can no longer be set using `select2(\"data\")`. You ' + 'should consider setting the value instead using `$element.val()`.');\n        }\n\n        var data = [];\n        this.dataAdapter.current(function (currentData) {\n          data = currentData;\n        });\n        return data;\n      };\n\n      Select2.prototype.val = function (args) {\n        if (this.options.get('debug') && window.console && console.warn) {\n          console.warn('Select2: The `select2(\"val\")` method has been deprecated and will be' + ' removed in later Select2 versions. Use $element.val() instead.');\n        }\n\n        if (args == null || args.length === 0) {\n          return this.$element.val();\n        }\n\n        var newVal = args[0];\n\n        if ($.isArray(newVal)) {\n          newVal = $.map(newVal, function (obj) {\n            return obj.toString();\n          });\n        }\n\n        this.$element.val(newVal).trigger('input').trigger('change');\n      };\n\n      Select2.prototype.destroy = function () {\n        this.$container.remove();\n\n        if (this.$element[0].detachEvent) {\n          this.$element[0].detachEvent('onpropertychange', this._syncA);\n        }\n\n        if (this._observer != null) {\n          this._observer.disconnect();\n\n          this._observer = null;\n        } else if (this.$element[0].removeEventListener) {\n          this.$element[0].removeEventListener('DOMAttrModified', this._syncA, false);\n          this.$element[0].removeEventListener('DOMNodeInserted', this._syncS, false);\n          this.$element[0].removeEventListener('DOMNodeRemoved', this._syncS, false);\n        }\n\n        this._syncA = null;\n        this._syncS = null;\n        this.$element.off('.select2');\n        this.$element.attr('tabindex', Utils.GetData(this.$element[0], 'old-tabindex'));\n        this.$element.removeClass('select2-hidden-accessible');\n        this.$element.attr('aria-hidden', 'false');\n        Utils.RemoveData(this.$element[0]);\n        this.$element.removeData('select2');\n        this.dataAdapter.destroy();\n        this.selection.destroy();\n        this.dropdown.destroy();\n        this.results.destroy();\n        this.dataAdapter = null;\n        this.selection = null;\n        this.dropdown = null;\n        this.results = null;\n      };\n\n      Select2.prototype.render = function () {\n        var $container = $('<span class=\"select2 select2-container\">' + '<span class=\"selection\"></span>' + '<span class=\"dropdown-wrapper\" aria-hidden=\"true\"></span>' + '</span>');\n        $container.attr('dir', this.options.get('dir'));\n        this.$container = $container;\n        this.$container.addClass('select2-container--' + this.options.get('theme'));\n        Utils.StoreData($container[0], 'element', this.$element);\n        return $container;\n      };\n\n      return Select2;\n    });\n    S2.define('select2/compat/utils', ['jquery'], function ($) {\n      function syncCssClasses($dest, $src, adapter) {\n        var classes,\n            replacements = [],\n            adapted;\n        classes = $.trim($dest.attr('class'));\n\n        if (classes) {\n          classes = '' + classes; // for IE which returns object\n\n          $(classes.split(/\\s+/)).each(function () {\n            // Save all Select2 classes\n            if (this.indexOf('select2-') === 0) {\n              replacements.push(this);\n            }\n          });\n        }\n\n        classes = $.trim($src.attr('class'));\n\n        if (classes) {\n          classes = '' + classes; // for IE which returns object\n\n          $(classes.split(/\\s+/)).each(function () {\n            // Only adapt non-Select2 classes\n            if (this.indexOf('select2-') !== 0) {\n              adapted = adapter(this);\n\n              if (adapted != null) {\n                replacements.push(adapted);\n              }\n            }\n          });\n        }\n\n        $dest.attr('class', replacements.join(' '));\n      }\n\n      return {\n        syncCssClasses: syncCssClasses\n      };\n    });\n    S2.define('select2/compat/containerCss', ['jquery', './utils'], function ($, CompatUtils) {\n      // No-op CSS adapter that discards all classes by default\n      function _containerAdapter(clazz) {\n        return null;\n      }\n\n      function ContainerCSS() {}\n\n      ContainerCSS.prototype.render = function (decorated) {\n        var $container = decorated.call(this);\n        var containerCssClass = this.options.get('containerCssClass') || '';\n\n        if ($.isFunction(containerCssClass)) {\n          containerCssClass = containerCssClass(this.$element);\n        }\n\n        var containerCssAdapter = this.options.get('adaptContainerCssClass');\n        containerCssAdapter = containerCssAdapter || _containerAdapter;\n\n        if (containerCssClass.indexOf(':all:') !== -1) {\n          containerCssClass = containerCssClass.replace(':all:', '');\n          var _cssAdapter = containerCssAdapter;\n\n          containerCssAdapter = function containerCssAdapter(clazz) {\n            var adapted = _cssAdapter(clazz);\n\n            if (adapted != null) {\n              // Append the old one along with the adapted one\n              return adapted + ' ' + clazz;\n            }\n\n            return clazz;\n          };\n        }\n\n        var containerCss = this.options.get('containerCss') || {};\n\n        if ($.isFunction(containerCss)) {\n          containerCss = containerCss(this.$element);\n        }\n\n        CompatUtils.syncCssClasses($container, this.$element, containerCssAdapter);\n        $container.css(containerCss);\n        $container.addClass(containerCssClass);\n        return $container;\n      };\n\n      return ContainerCSS;\n    });\n    S2.define('select2/compat/dropdownCss', ['jquery', './utils'], function ($, CompatUtils) {\n      // No-op CSS adapter that discards all classes by default\n      function _dropdownAdapter(clazz) {\n        return null;\n      }\n\n      function DropdownCSS() {}\n\n      DropdownCSS.prototype.render = function (decorated) {\n        var $dropdown = decorated.call(this);\n        var dropdownCssClass = this.options.get('dropdownCssClass') || '';\n\n        if ($.isFunction(dropdownCssClass)) {\n          dropdownCssClass = dropdownCssClass(this.$element);\n        }\n\n        var dropdownCssAdapter = this.options.get('adaptDropdownCssClass');\n        dropdownCssAdapter = dropdownCssAdapter || _dropdownAdapter;\n\n        if (dropdownCssClass.indexOf(':all:') !== -1) {\n          dropdownCssClass = dropdownCssClass.replace(':all:', '');\n          var _cssAdapter = dropdownCssAdapter;\n\n          dropdownCssAdapter = function dropdownCssAdapter(clazz) {\n            var adapted = _cssAdapter(clazz);\n\n            if (adapted != null) {\n              // Append the old one along with the adapted one\n              return adapted + ' ' + clazz;\n            }\n\n            return clazz;\n          };\n        }\n\n        var dropdownCss = this.options.get('dropdownCss') || {};\n\n        if ($.isFunction(dropdownCss)) {\n          dropdownCss = dropdownCss(this.$element);\n        }\n\n        CompatUtils.syncCssClasses($dropdown, this.$element, dropdownCssAdapter);\n        $dropdown.css(dropdownCss);\n        $dropdown.addClass(dropdownCssClass);\n        return $dropdown;\n      };\n\n      return DropdownCSS;\n    });\n    S2.define('select2/compat/initSelection', ['jquery'], function ($) {\n      function InitSelection(decorated, $element, options) {\n        if (options.get('debug') && window.console && console.warn) {\n          console.warn('Select2: The `initSelection` option has been deprecated in favor' + ' of a custom data adapter that overrides the `current` method. ' + 'This method is now called multiple times instead of a single ' + 'time when the instance is initialized. Support will be removed ' + 'for the `initSelection` option in future versions of Select2');\n        }\n\n        this.initSelection = options.get('initSelection');\n        this._isInitialized = false;\n        decorated.call(this, $element, options);\n      }\n\n      InitSelection.prototype.current = function (decorated, callback) {\n        var self = this;\n\n        if (this._isInitialized) {\n          decorated.call(this, callback);\n          return;\n        }\n\n        this.initSelection.call(null, this.$element, function (data) {\n          self._isInitialized = true;\n\n          if (!$.isArray(data)) {\n            data = [data];\n          }\n\n          callback(data);\n        });\n      };\n\n      return InitSelection;\n    });\n    S2.define('select2/compat/inputData', ['jquery', '../utils'], function ($, Utils) {\n      function InputData(decorated, $element, options) {\n        this._currentData = [];\n        this._valueSeparator = options.get('valueSeparator') || ',';\n\n        if ($element.prop('type') === 'hidden') {\n          if (options.get('debug') && console && console.warn) {\n            console.warn('Select2: Using a hidden input with Select2 is no longer ' + 'supported and may stop working in the future. It is recommended ' + 'to use a `<select>` element instead.');\n          }\n        }\n\n        decorated.call(this, $element, options);\n      }\n\n      InputData.prototype.current = function (_, callback) {\n        function getSelected(data, selectedIds) {\n          var selected = [];\n\n          if (data.selected || $.inArray(data.id, selectedIds) !== -1) {\n            data.selected = true;\n            selected.push(data);\n          } else {\n            data.selected = false;\n          }\n\n          if (data.children) {\n            selected.push.apply(selected, getSelected(data.children, selectedIds));\n          }\n\n          return selected;\n        }\n\n        var selected = [];\n\n        for (var d = 0; d < this._currentData.length; d++) {\n          var data = this._currentData[d];\n          selected.push.apply(selected, getSelected(data, this.$element.val().split(this._valueSeparator)));\n        }\n\n        callback(selected);\n      };\n\n      InputData.prototype.select = function (_, data) {\n        if (!this.options.get('multiple')) {\n          this.current(function (allData) {\n            $.map(allData, function (data) {\n              data.selected = false;\n            });\n          });\n          this.$element.val(data.id);\n          this.$element.trigger('input').trigger('change');\n        } else {\n          var value = this.$element.val();\n          value += this._valueSeparator + data.id;\n          this.$element.val(value);\n          this.$element.trigger('input').trigger('change');\n        }\n      };\n\n      InputData.prototype.unselect = function (_, data) {\n        var self = this;\n        data.selected = false;\n        this.current(function (allData) {\n          var values = [];\n\n          for (var d = 0; d < allData.length; d++) {\n            var item = allData[d];\n\n            if (data.id == item.id) {\n              continue;\n            }\n\n            values.push(item.id);\n          }\n\n          self.$element.val(values.join(self._valueSeparator));\n          self.$element.trigger('input').trigger('change');\n        });\n      };\n\n      InputData.prototype.query = function (_, params, callback) {\n        var results = [];\n\n        for (var d = 0; d < this._currentData.length; d++) {\n          var data = this._currentData[d];\n          var matches = this.matches(params, data);\n\n          if (matches !== null) {\n            results.push(matches);\n          }\n        }\n\n        callback({\n          results: results\n        });\n      };\n\n      InputData.prototype.addOptions = function (_, $options) {\n        var options = $.map($options, function ($option) {\n          return Utils.GetData($option[0], 'data');\n        });\n\n        this._currentData.push.apply(this._currentData, options);\n      };\n\n      return InputData;\n    });\n    S2.define('select2/compat/matcher', ['jquery'], function ($) {\n      function oldMatcher(matcher) {\n        function wrappedMatcher(params, data) {\n          var match = $.extend(true, {}, data);\n\n          if (params.term == null || $.trim(params.term) === '') {\n            return match;\n          }\n\n          if (data.children) {\n            for (var c = data.children.length - 1; c >= 0; c--) {\n              var child = data.children[c]; // Check if the child object matches\n              // The old matcher returned a boolean true or false\n\n              var doesMatch = matcher(params.term, child.text, child); // If the child didn't match, pop it off\n\n              if (!doesMatch) {\n                match.children.splice(c, 1);\n              }\n            }\n\n            if (match.children.length > 0) {\n              return match;\n            }\n          }\n\n          if (matcher(params.term, data.text, data)) {\n            return match;\n          }\n\n          return null;\n        }\n\n        return wrappedMatcher;\n      }\n\n      return oldMatcher;\n    });\n    S2.define('select2/compat/query', [], function () {\n      function Query(decorated, $element, options) {\n        if (options.get('debug') && window.console && console.warn) {\n          console.warn('Select2: The `query` option has been deprecated in favor of a ' + 'custom data adapter that overrides the `query` method. Support ' + 'will be removed for the `query` option in future versions of ' + 'Select2.');\n        }\n\n        decorated.call(this, $element, options);\n      }\n\n      Query.prototype.query = function (_, params, callback) {\n        params.callback = callback;\n        var query = this.options.get('query');\n        query.call(null, params);\n      };\n\n      return Query;\n    });\n    S2.define('select2/dropdown/attachContainer', [], function () {\n      function AttachContainer(decorated, $element, options) {\n        decorated.call(this, $element, options);\n      }\n\n      AttachContainer.prototype.position = function (decorated, $dropdown, $container) {\n        var $dropdownContainer = $container.find('.dropdown-wrapper');\n        $dropdownContainer.append($dropdown);\n        $dropdown.addClass('select2-dropdown--below');\n        $container.addClass('select2-container--below');\n      };\n\n      return AttachContainer;\n    });\n    S2.define('select2/dropdown/stopPropagation', [], function () {\n      function StopPropagation() {}\n\n      StopPropagation.prototype.bind = function (decorated, container, $container) {\n        decorated.call(this, container, $container);\n        var stoppedEvents = ['blur', 'change', 'click', 'dblclick', 'focus', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'keypress', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseup', 'search', 'touchend', 'touchstart'];\n        this.$dropdown.on(stoppedEvents.join(' '), function (evt) {\n          evt.stopPropagation();\n        });\n      };\n\n      return StopPropagation;\n    });\n    S2.define('select2/selection/stopPropagation', [], function () {\n      function StopPropagation() {}\n\n      StopPropagation.prototype.bind = function (decorated, container, $container) {\n        decorated.call(this, container, $container);\n        var stoppedEvents = ['blur', 'change', 'click', 'dblclick', 'focus', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'keypress', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseup', 'search', 'touchend', 'touchstart'];\n        this.$selection.on(stoppedEvents.join(' '), function (evt) {\n          evt.stopPropagation();\n        });\n      };\n\n      return StopPropagation;\n    });\n    /*!\r\n     * jQuery Mousewheel 3.1.13\r\n     *\r\n     * Copyright jQuery Foundation and other contributors\r\n     * Released under the MIT license\r\n     * http://jquery.org/license\r\n     */\n\n    (function (factory) {\n      if (typeof S2.define === 'function' && S2.define.amd) {\n        // AMD. Register as an anonymous module.\n        S2.define('jquery-mousewheel', ['jquery'], factory);\n      } else if (( false ? undefined : _typeof(exports)) === 'object') {\n        // Node/CommonJS style for Browserify\n        module.exports = factory;\n      } else {\n        // Browser globals\n        factory(jQuery);\n      }\n    })(function ($) {\n      var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],\n          toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],\n          slice = Array.prototype.slice,\n          nullLowestDeltaTimeout,\n          lowestDelta;\n\n      if ($.event.fixHooks) {\n        for (var i = toFix.length; i;) {\n          $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;\n        }\n      }\n\n      var special = $.event.special.mousewheel = {\n        version: '3.1.12',\n        setup: function setup() {\n          if (this.addEventListener) {\n            for (var i = toBind.length; i;) {\n              this.addEventListener(toBind[--i], handler, false);\n            }\n          } else {\n            this.onmousewheel = handler;\n          } // Store the line height and page height for this particular element\n\n\n          $.data(this, 'mousewheel-line-height', special.getLineHeight(this));\n          $.data(this, 'mousewheel-page-height', special.getPageHeight(this));\n        },\n        teardown: function teardown() {\n          if (this.removeEventListener) {\n            for (var i = toBind.length; i;) {\n              this.removeEventListener(toBind[--i], handler, false);\n            }\n          } else {\n            this.onmousewheel = null;\n          } // Clean up the data we added to the element\n\n\n          $.removeData(this, 'mousewheel-line-height');\n          $.removeData(this, 'mousewheel-page-height');\n        },\n        getLineHeight: function getLineHeight(elem) {\n          var $elem = $(elem),\n              $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();\n\n          if (!$parent.length) {\n            $parent = $('body');\n          }\n\n          return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;\n        },\n        getPageHeight: function getPageHeight(elem) {\n          return $(elem).height();\n        },\n        settings: {\n          adjustOldDeltas: true,\n          // see shouldAdjustOldDeltas() below\n          normalizeOffset: true // calls getBoundingClientRect for each event\n\n        }\n      };\n      $.fn.extend({\n        mousewheel: function mousewheel(fn) {\n          return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');\n        },\n        unmousewheel: function unmousewheel(fn) {\n          return this.unbind('mousewheel', fn);\n        }\n      });\n\n      function handler(event) {\n        var orgEvent = event || window.event,\n            args = slice.call(arguments, 1),\n            delta = 0,\n            deltaX = 0,\n            deltaY = 0,\n            absDelta = 0,\n            offsetX = 0,\n            offsetY = 0;\n        event = $.event.fix(orgEvent);\n        event.type = 'mousewheel'; // Old school scrollwheel delta\n\n        if ('detail' in orgEvent) {\n          deltaY = orgEvent.detail * -1;\n        }\n\n        if ('wheelDelta' in orgEvent) {\n          deltaY = orgEvent.wheelDelta;\n        }\n\n        if ('wheelDeltaY' in orgEvent) {\n          deltaY = orgEvent.wheelDeltaY;\n        }\n\n        if ('wheelDeltaX' in orgEvent) {\n          deltaX = orgEvent.wheelDeltaX * -1;\n        } // Firefox < 17 horizontal scrolling related to DOMMouseScroll event\n\n\n        if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {\n          deltaX = deltaY * -1;\n          deltaY = 0;\n        } // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy\n\n\n        delta = deltaY === 0 ? deltaX : deltaY; // New school wheel delta (wheel event)\n\n        if ('deltaY' in orgEvent) {\n          deltaY = orgEvent.deltaY * -1;\n          delta = deltaY;\n        }\n\n        if ('deltaX' in orgEvent) {\n          deltaX = orgEvent.deltaX;\n\n          if (deltaY === 0) {\n            delta = deltaX * -1;\n          }\n        } // No change actually happened, no reason to go any further\n\n\n        if (deltaY === 0 && deltaX === 0) {\n          return;\n        } // Need to convert lines and pages to pixels if we aren't already in pixels\n        // There are three delta modes:\n        //   * deltaMode 0 is by pixels, nothing to do\n        //   * deltaMode 1 is by lines\n        //   * deltaMode 2 is by pages\n\n\n        if (orgEvent.deltaMode === 1) {\n          var lineHeight = $.data(this, 'mousewheel-line-height');\n          delta *= lineHeight;\n          deltaY *= lineHeight;\n          deltaX *= lineHeight;\n        } else if (orgEvent.deltaMode === 2) {\n          var pageHeight = $.data(this, 'mousewheel-page-height');\n          delta *= pageHeight;\n          deltaY *= pageHeight;\n          deltaX *= pageHeight;\n        } // Store lowest absolute delta to normalize the delta values\n\n\n        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));\n\n        if (!lowestDelta || absDelta < lowestDelta) {\n          lowestDelta = absDelta; // Adjust older deltas if necessary\n\n          if (shouldAdjustOldDeltas(orgEvent, absDelta)) {\n            lowestDelta /= 40;\n          }\n        } // Adjust older deltas if necessary\n\n\n        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {\n          // Divide all the things by 40!\n          delta /= 40;\n          deltaX /= 40;\n          deltaY /= 40;\n        } // Get a whole, normalized value for the deltas\n\n\n        delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);\n        deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);\n        deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta); // Normalise offsetX and offsetY properties\n\n        if (special.settings.normalizeOffset && this.getBoundingClientRect) {\n          var boundingRect = this.getBoundingClientRect();\n          offsetX = event.clientX - boundingRect.left;\n          offsetY = event.clientY - boundingRect.top;\n        } // Add information to the event object\n\n\n        event.deltaX = deltaX;\n        event.deltaY = deltaY;\n        event.deltaFactor = lowestDelta;\n        event.offsetX = offsetX;\n        event.offsetY = offsetY; // Go ahead and set deltaMode to 0 since we converted to pixels\n        // Although this is a little odd since we overwrite the deltaX/Y\n        // properties with normalized deltas.\n\n        event.deltaMode = 0; // Add event and delta to the front of the arguments\n\n        args.unshift(event, delta, deltaX, deltaY); // Clearout lowestDelta after sometime to better\n        // handle multiple device types that give different\n        // a different lowestDelta\n        // Ex: trackpad = 3 and mouse wheel = 120\n\n        if (nullLowestDeltaTimeout) {\n          clearTimeout(nullLowestDeltaTimeout);\n        }\n\n        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);\n        return ($.event.dispatch || $.event.handle).apply(this, args);\n      }\n\n      function nullLowestDelta() {\n        lowestDelta = null;\n      }\n\n      function shouldAdjustOldDeltas(orgEvent, absDelta) {\n        // If this is an older event and the delta is divisable by 120,\n        // then we are assuming that the browser is treating this as an\n        // older mouse wheel event and that we should divide the deltas\n        // by 40 to try and get a more usable deltaFactor.\n        // Side note, this actually impacts the reported scroll distance\n        // in older browsers and can cause scrolling to be slower than native.\n        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.\n        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;\n      }\n    });\n\n    S2.define('jquery.select2', ['jquery', 'jquery-mousewheel', './select2/core', './select2/defaults', './select2/utils'], function ($, _, Select2, Defaults, Utils) {\n      if ($.fn.select2 == null) {\n        // All methods that should return the element\n        var thisMethods = ['open', 'close', 'destroy'];\n\n        $.fn.select2 = function (options) {\n          options = options || {};\n\n          if (_typeof(options) === 'object') {\n            this.each(function () {\n              var instanceOptions = $.extend(true, {}, options);\n              var instance = new Select2($(this), instanceOptions);\n            });\n            return this;\n          } else if (typeof options === 'string') {\n            var ret;\n            var args = Array.prototype.slice.call(arguments, 1);\n            this.each(function () {\n              var instance = Utils.GetData(this, 'select2');\n\n              if (instance == null && window.console && console.error) {\n                console.error('The select2(\\'' + options + '\\') method was called on an ' + 'element that is not using Select2.');\n              }\n\n              ret = instance[options].apply(instance, args);\n            }); // Check if we should be returning `this`\n\n            if ($.inArray(options, thisMethods) > -1) {\n              return this;\n            }\n\n            return ret;\n          } else {\n            throw new Error('Invalid arguments for Select2: ' + options);\n          }\n        };\n      }\n\n      if ($.fn.select2.defaults == null) {\n        $.fn.select2.defaults = Defaults;\n      }\n\n      return Select2;\n    }); // Return the AMD loader configuration so it can be used outside of this file\n\n    return {\n      define: S2.define,\n      require: S2.require\n    };\n  }(); // Autoload the jQuery bindings\n  // We know that all of the modules exist above this, so we're safe\n\n\n  var select2 = S2.require('jquery.select2'); // Hold the AMD module references on the jQuery function that was just loaded\n  // This allows Select2 to use the internal loader outside of this file, such\n  // as in the language files.\n\n\n  jQuery.fn.select2.amd = S2; // Return the Select2 instance for anyone who is importing it.\n\n  return select2;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/select2/js/select2.full.js\n");

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function() { module.exports = window[\"jQuery\"]; }());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIj9jZDBjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUNBQW1DLEVBQUUiLCJmaWxlIjoianF1ZXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkgeyBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvd1tcImpRdWVyeVwiXTsgfSgpKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///jquery\n");

/***/ })

/******/ })));